---
title: "Take Home Exercise 04"
author: "Cheryl Jeanne Chiew"
date: "17 February 2023"
date-modified: "`r Sys.Date()`"
execute:
  echo: true
  eval: true
  warning: false
format: html
editor: visual
---

# 1. Introduction

This Take-Home Exercise seeks to uncover the impact of COVID-19 as well as the global economic and political dynamic in 2022 on Singapore's bi-lateral trade (i.e. Import, Export and Trade Balance) by using appropriate analytical visualisation techniques learned in Lesson 6: Itâ€™s About Time. 

The dataset selected for this exercise is sourced from [Singstat.gov.sg](https://www.singstat.gov.sg/find-data/search-by-theme/trade-and-investment/merchandise-trade/latest-data) and contains data on the *Merchandise Imports and Exports by Region / Market*.

For the purpose of this exercise, the study period will be conducted from January 2020 to December 2022.


# 2. Data Visualization

#### Installing and Loading R Packages

```{r}
pacman::p_load(readxl, dplyr, tidyverse, lubridate, knitr) 
```

#### Importing Data

```{r}
#| warning: false
import_data <- read_xlsx("data/outputFile.xlsx",
                         sheet = "T1",                    #<< select sheet T2
                         range = "A10:UT129",             #<< only read specified cell range 
                         na = "na")                       #<< treat na as missing values

export_data <- read_xlsx("data/outputFile.xlsx",
                         sheet = "T2",                    #<< select sheet T2
                         range = "A10:UT101",             #<< only read specified cell range
                         na = "na")                       #<< treat na as missing values
```

#### Data Preparation / Data Output

::: {.panel-tabset}

## Import Dataset
```{r}
#| warning: false

#<< remove spaces in column names
colnames(import_data) <- gsub(" ", "", colnames(import_data), fixed = TRUE)

import <- import_data %>%
  pivot_longer(                                                       #<< pivot longer to convert columns to rows with values as new numeric values column
     cols = `2023Jan`:`1976Jan`, 
     names_to = "date",
     values_transform = as.numeric,
     values_to = "value") %>%
  pivot_wider(                                                        #<< pivot wider to convert dataseries column to columns
    names_from = DataSeries,
    values_from = value
  ) %>%
  mutate(date = ym(date)) %>%                                         #<< convert values to date
  mutate_at(vars(contains('Thousand Dollars')), ~ (. *1000)) %>%      #<< if column contains THOUSAND, multiply values by 1000
  mutate_at(vars(contains('Million Dollars')), ~ (. *1000000)) %>%    #<< if column contains THOUSAND, multiply values by 1000000
  filter(between(date, as.Date('2020-01-01'), as.Date('2022-12-01'))) #<< filter for date range Jan20 - Dec22

#<< remove thousand dollar string from column name
colnames(import) <- gsub(" (Thousand Dollars)", "", colnames(import), fixed = TRUE)

#<< remove million dollar string from column name            
colnames(import) <- gsub(" (Million Dollars)", "", colnames(import), fixed = TRUE)  

#<< remove symbols from column names
colnames(import) <- str_replace_all(colnames(import), "[^[:alnum:]]", "")

kable(head(import))

```

## Export Dataset
```{r}
#| warning: false

#<< remove spaces in column names
colnames(export_data) <- gsub(" ", "", colnames(export_data), fixed = TRUE)

export <- export_data %>%
  pivot_longer(                                                       #<< pivot longer to convert columns to rows with values as new numeric values column
     cols = `2023Jan`:`1976Jan`, 
     names_to = "date",
     values_transform = as.numeric,
     values_to = "value") %>%
  pivot_wider(                                                        #<< pivot wider to convert dataseries column to columns
    names_from = DataSeries,
    values_from = value
  ) %>%
  mutate(date = ym(date)) %>%                                         #<< convert values to date
  mutate_at(vars(contains('Thousand Dollars')), ~ (. *1000)) %>%      #<< if column contains THOUSAND, multiply values by 1000
  mutate_at(vars(contains('Million Dollars')), ~ (. *1000000)) %>%    #<< if column contains THOUSAND, multiply values by 1000000
  filter(between(date, as.Date('2020-01-01'), as.Date('2022-12-01'))) #<< filter for date range Jan20 - Dec22

#<< remove thousand dollar string from column name
colnames(export) <- gsub(" (Thousand Dollars)", "", colnames(export), fixed = TRUE)

#<< remove million dollar string from column name            
colnames(export) <- gsub(" (Million Dollars)", "", colnames(export), fixed = TRUE)  

#<< remove symbols from column names
colnames(export) <- str_replace_all(colnames(export), "[^[:alnum:]]", "")

kable(head(export))

```

:::


#### Plotting the Data



##Retain all countries, pick out nuances

##consider using horizon graph? for countries
##cycle plot
##slope graphs
