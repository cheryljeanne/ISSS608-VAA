---
title: "Take Home Exercise 04"
author: "Cheryl Jeanne Chiew"
date: "17 February 2023"
date-modified: "`r Sys.Date()`"
execute:
  echo: true
  eval: true
  warning: false
format: html
editor: visual
---

# 1. Introduction

This Take-Home Exercise seeks to uncover the impact of COVID-19 as well as the global economic and political dynamic in 2022 on Singapore's bi-lateral trade (i.e. Import, Export and Trade Balance) by using appropriate analytical visualisation techniques learned in Lesson 6: It's About Time.

The dataset selected for this exercise is sourced from [Singstat.gov.sg](https://www.singstat.gov.sg/find-data/search-by-theme/trade-and-investment/merchandise-trade/latest-data) and contains data on the *Merchandise Imports and Exports by Region / Market*.

For the purpose of this exercise, the study period will be conducted from **January 2020 to December 2022**.

# 2. Data Visualization

#### Installing and Loading R Packages

```{r}
pacman::p_load(readxl, dplyr, tidyverse, lubridate, knitr, patchwork, CGPfunctions, gganimate, gapminder, treemapify, ggiraph, ggthemes) 
```

#### Importing Data

This code chunk attempts to extract the excel data into a data frame.

```{r}
#| warning: false
import_data <- read_xlsx("data/outputFile.xlsx",
                         sheet = "T1",                    #<< select sheet T2
                         range = "A10:UT129",             #<< only read specified cell range 
                         na = "na")                       #<< treat na as missing values

export_data <- read_xlsx("data/outputFile.xlsx",
                         sheet = "T2",                    #<< select sheet T2
                         range = "A10:UT101",             #<< only read specified cell range
                         na = "na")                       #<< treat na as missing values
```

#### Data Preparation / Data Output

This code chunk attempts to prepare the data set into a visualization friendly format. The base post-wrangled data set is in a **wide data format.** Depending on the requirements of the selected analytical visualisation plots, the data set may be further manipulated in the respective sections below.

::: panel-tabset
## Import Dataset

```{r}
#| warning: false

#<< remove spaces in column names
colnames(import_data) <- gsub(" ", "", colnames(import_data), fixed = TRUE)

import <- import_data %>%
  pivot_longer(                                                       #<< pivot longer to convert columns to rows with values as new numeric values column
     cols = `2023Jan`:`1976Jan`, 
     names_to = "date",
     values_transform = as.numeric,
     values_to = "value") %>%
  replace(is.na(.), 0) %>%                                            #<< replace all NA values with zero
  pivot_wider(                                                        #<< pivot wider to convert dataseries column to columns
    names_from = DataSeries,
    values_from = value
  ) %>%
  mutate(date = ym(date)) %>%                                         #<< convert values to date
  mutate_at(vars(contains('Thousand Dollars')), ~ (. *1000)) %>%      #<< if column contains THOUSAND, multiply values by 1000
  mutate_at(vars(contains('Million Dollars')), ~ (. *1000000)) %>%    #<< if column contains THOUSAND, multiply values by 1000000
  filter(between(date, as.Date('2020-01-01'), as.Date('2022-12-01'))) #<< filter for date range Jan20 - Dec22

#<< remove thousand dollar string from column name
colnames(import) <- gsub(" (Thousand Dollars)", "", colnames(import), fixed = TRUE)

#<< remove million dollar string from column name            
colnames(import) <- gsub(" (Million Dollars)", "", colnames(import), fixed = TRUE)  

#<< remove symbols from column names
colnames(import) <- str_replace_all(colnames(import), "[^[:alnum:]]", "")

kable(head(import))

```

## Export Dataset

```{r}
#| warning: false

#<< remove spaces in column names
colnames(export_data) <- gsub(" ", "", colnames(export_data), fixed = TRUE)

export <- export_data %>%
  pivot_longer(                                                       #<< pivot longer to convert columns to rows with values as new numeric values column
     cols = `2023Jan`:`1976Jan`, 
     names_to = "date",
     values_transform = as.numeric,
     values_to = "value") %>%
  replace(is.na(.), 0) %>%                                            #<< replace all NA values with zero
  pivot_wider(                                                        #<< pivot wider to convert dataseries column to columns
    names_from = DataSeries,
    values_from = value
  ) %>%
  mutate(date = ym(date)) %>%                                         #<< convert values to date
  mutate_at(vars(contains('Thousand Dollars')), ~ (. *1000)) %>%      #<< if column contains THOUSAND, multiply values by 1000
  mutate_at(vars(contains('Million Dollars')), ~ (. *1000000)) %>%    #<< if column contains THOUSAND, multiply values by 1000000
  filter(between(date, as.Date('2020-01-01'), as.Date('2022-12-01'))) #<< filter for date range Jan20 - Dec22

#<< remove thousand dollar string from column name
colnames(export) <- gsub(" (Thousand Dollars)", "", colnames(export), fixed = TRUE)

#<< remove million dollar string from column name            
colnames(export) <- gsub(" (Million Dollars)", "", colnames(export), fixed = TRUE)  

#<< remove symbols from column names
colnames(export) <- str_replace_all(colnames(export), "[^[:alnum:]]", "")

kable(head(export))

```
:::

## TREEMAP ANIMATION: BY COUNTRIES

#### Selection & Design Consideration

The **treemap plot** has been selected to visualize Singapore's largest trading partners by import and export values:

• Treemaps are able to effectively depict the relative sizes of a country's trade value at a high level, allowing for quick perception of the countries that are large contributors. • The sequential colour scale helps the user easily identify larger trading partner countries compared to other countries in the same group. • An animation mapping feature has also been incorporated to allow users to visually see the changes across the time period.

#### Reproducible Procedures

The code chunk below contains the codes required to reproduce this visualization, along with the corresponding annotations which describes the procedures used.

```{r}
#| warning: false
#| output: false

#<< PREPARING DATASET IN LONG FORMAT
country_import_long <- import %>%
  select(-2, -3, -4, -5, -6, -7, -8) %>%
  pivot_longer(                                                             #<< pivot longer to convert columns to rows with values as new numeric values column
     cols = -c('date'), 
     names_to = "country",
     values_transform = as.numeric,
     values_to = "import_value") %>%
  mutate(val_mil = round(import_value/1000000,1),                           #<< rounding values to millions for easy viewability
         val_mil = 
           format(round(as.numeric(val_mil), 1), nsmall=1, big.mark=",")    #<< formatting to add thousands separator
         ) %>%
  unite("labels", country,val_mil, sep = "\n", remove = FALSE)              #<< create treemap labels

#<< PLOTTING IMPORT TREEMAP
p1 <- country_import_long %>%
  filter(import_value > 0) %>%                                              #<< remove country lines where import value = 0
  ggplot(aes(area = import_value, fill = import_value, label = labels)) +   #<< ggplot function - set area / fill / labels
  theme(legend.position = "none",                                     
        plot.title = element_text(size = 25, face = "bold"),
        plot.caption = element_text(size = 15)) +
  geom_treemap() +                                                          #<< plot treemap - default squarify layout
  geom_treemap_text(place = "centre", grow = TRUE, colour = "white") +      #<< label text to grow and fill square size
  transition_time(date) +                                                   #<< transition based on time attribute
  ease_aes('linear') +                                                      #<< linear progression
  labs(title = "SG Bilateral Trade Imports - Period: {frame_time}",         #<< setting of Plot Title and Caption
       caption = "The area of each tile represents the value of SG's imports (in millions) by Country")

#<< save animation as gif file, set number of frames and plot size
anim_save("animated_treemap_import.gif", p1, nframes = 216, width = 600, height = 600)

#<< PREPARING DATASET IN LONG FORMAT
country_export_long <- export %>%
  select(-2, -3, -4, -5, -6, -7, -8) %>%
  pivot_longer(                                                             #<< pivot longer to convert columns to rows with values as new numeric values column
     cols = -c('date'), 
     names_to = "country",
     values_transform = as.numeric,
     values_to = "export_value") %>%
  mutate(val_mil = round(export_value/1000000,1),                           #<< rounding values to millions for easy viewability
         val_mil = 
           format(round(as.numeric(val_mil), 1), nsmall=1, big.mark=",")    #<< formatting to add thousands separator
         ) %>%
  unite("labels", country,val_mil, sep = "\n", remove = FALSE)              #<< create treemap labels

#<< PLOTTING IMPORT TREEMAP
p2 <- country_export_long %>%
  filter(export_value > 0) %>%                                              #<< remove country lines where import value = 0
  ggplot(aes(area = export_value, fill = export_value, label = labels)) +   #<< ggplot function - set area / fill / labels
  theme(legend.position = "none", 
        plot.title = element_text(size = 25, face = "bold"),
        plot.caption = element_text(size = 15)) +
  geom_treemap() +                                                          #<< plot treemap - default squarify layout
  geom_treemap_text(place = "centre", grow = TRUE, colour = "white") +      #<< label text to grow and fill square size
  transition_time(date) +                                                   #<< transition based on time attribute
  ease_aes('linear') +                                                      #<< linear progression
  labs(title = "SG Bilateral Trade Exports - Period: {frame_time}",         #<< setting of Plot Title and Caption
       caption = "The area of each tile represents the value of SG's imports (in millions) by Country")

#<< save animation as gif file, set number of frames and plot size
anim_save("animated_treemap_export.gif", p2, nframes = 216, width = 600, height = 600)

```

::: {layout-ncol="2"}
![SG Trade Imports: Jan 2020 - Dec 2022](animated_treemap_import.gif){fig-align="center"}

![SG Trade Exports: Jan 2020 - Dec 2022](animated_treemap_export.gif){fig-align="center"}
:::

#### Patterns Revealed by Visualisation

**China, Malaysia, Taiwan, United States** are Singapore's major trading partners.

This has not significantly changed during the COVID-19 period. From the trade value displayed within the treemap grids, the COVID-19 effect was evident, where both import and export values of the top countries ranged around \$5bn at the peak of the COVID-19 period (year 2020), before rising to \~\$7bn in the years after.

## STACKED BAR CHART: TOP 15 TRADING PARTNERS

#### Selection & Design Consideration

The **stacked bar chart** has been selected to allow for easy comparison between countries. Given that the bars are proportional to the values represented, there was a risk that the countries with extreme high trading values would result in the data for "smaller countries" being compressed and hence hidden. As such, I decided to transform the dataset by using **rate of change in %** instead. This would allow for ease of comparison over the given time period between the countries based on % values. An interactive tooltip element was added as well to provide additional complementary information for users, displaying trade value in dollar terms as well as other associated information to the bar on hover.

#### Reproducible Procedures

The code chunk below contains the codes required to reproduce this visualization, along with the corresponding annotations which describes the procedures used.

```{r}
#| warning: false
#| fig-height: 20
#| fig-width: 15

country_import_long_1 <- import %>%
  select(-2, -3, -4, -5, -6, -7, -8) %>%                                    #<< remove uninterested columns (total, regional)
  mutate(year = year(date)) %>%                                             #<< aggregate and sum values by year
  aggregate(.~year, sum) %>%                                                
  pivot_longer(                                                             #<< pivot longer to convert columns to rows with values as new numeric values column
     cols = -c('date','year'), 
     names_to = "country",
     values_transform = as.numeric,
     values_to = "import") %>%
  select(-c('date'))

country_export_long_1 <- export %>%
  select(-2, -3, -4, -5, -6, -7, -8) %>%                                    #<< remove uninterested columns (total, regional)
  mutate(year = year(date)) %>%                                             #<< aggregate and sum values by year
  aggregate(.~year, sum) %>%                                                
  pivot_longer(                                                             #<< pivot longer to convert columns to rows with values as new numeric values column
     cols = -c('date','year'), 
     names_to = "country",
     values_transform = as.numeric,
     values_to = "export") %>%
  select(-c('date'))

country_long_1 <- inner_join(country_export_long_1,                         #<< combining import and export dataset
                             country_import_long_1) %>%             
  pivot_longer(                                                             #<< pivot longer to convert columns to rows with values as new numeric values column
     cols = c('export', 'import'), 
     names_to = "Merc_Trade",
     values_transform = as.numeric,
     values_to = "TradeValue") %>%
    group_by(country, Merc_Trade) %>% 
  arrange(year, country, Merc_Trade) %>% 
  mutate(rateofchange                                                       #<< derive rate of change column
         = 100 * (TradeValue - lag(TradeValue))/lag(TradeValue),
         rateofchange = round(rateofchange,1)) %>%
  ungroup() %>%
  filter(year != 2020)                                                      #<< remove year 2020 as ROC will be NULL

top15countries <- country_long_1 %>%                                        #<< Derive Top 5 trading partner countries during period
  select(country, TradeValue) %>%                                           
  group_by(country)  %>%                                                    #<< Group by countries , sum import / export
  summarise(sum_TV=sum(TradeValue),
            .groups = 'drop') %>%
  arrange(desc(sum_TV)) %>%                                                 #<< Sort countries by trade value in descending order
  slice(0:15)                                                               #<< select top 15 countries

#<< Inner join back to main dataset to get full data only for the Top 5 countries
country_long_1_top15 <- inner_join(country_long_1, 
                              top15countries) %>%
  mutate(TradeValue_bil = round(TradeValue/1000000000,1)) 

country_long_1_top15$tooltip <- c(paste0(                                   #<< Creating annotations for tooltip
  "Country = ", country_long_1_top15$country,
  "\n Trade Type = ", country_long_1_top15$Merc_Trade,
  "\n Trade Value (bn) = $", country_long_1_top15$TradeValue_bil,
  "\n Rate of % Change from prev year = ", country_long_1_top15$rateofchange))

p <- ggplot(country_long_1_top15,                                 
            aes(fill=Merc_Trade, y=rateofchange, x = country, 
                label = rateofchange)) +
  hrbrthemes::theme_ipsum(grid="Y") +
  geom_bar_interactive(                                                     #<< plotting interactive stacked bar
    aes(tooltip = tooltip), position="stack", stat="identity") +
  geom_text(
    position = position_stack(vjust = 0.5), size = 2, color = "#ffffff") +
  theme(legend.position="bottom") +                                         #<< setting of themes, titles and legends
  guides(fill=guide_legend(title="Merchandise Trade Type")) +
  ggtitle("Changes in SG Merchandise Trade: Top 15 Countries (2020-2022)") +
  ylab("Rate of Change in %") +
  xlab("Trade Partner (by Country))") +
  labs(caption = "Note:2021 represents the rate of % change from 2020 to 2021 by import / export trade type.\n2022 represents the rate of % change from 2021 to 2022 by import / export trade type.") +
  theme(
    axis.title = element_text(size=8), 
    axis.text.x = element_text(size=8, angle=45, hjust = 0.75), 
    legend.title = element_text(size=8), #change legend title font size
    legend.text = element_text(size=8), 
    legend.key.size = unit(0.3, 'cm')
  ) + 
  facet_wrap(~ year, ncol = 1)                                              #<< facet wrap for trellis plot 

girafe(                                  
  ggobj = p,                             
  width_svg = 8,                        
  height_svg = 8                   
)     

```

#### Patterns Revealed by Visualisation

An interesting insight that was observed was that although Hong Kong is one of the top export countries for Singapore, **exports to Hong Kong actually dropped year on year** during the COVID-19 period. On the flipside, the UAE is ranked 13th out of the top 15 trading partners of Singapore, but the **rate of change for both imports and exports ranked the highest** amongst the countries.

## LINE PLOT: TOP 15 TRADING PARTNERS TIME SERIES

#### Selection & Design Consideration

A **line chart in a trellis format** was selected to depict the time series trends of export and import trades.The differences between import and export values was also highlighted in a color coordinated format to allow the user to visually identify if the trading partner was a net exporter or importer (i.e., green: export \> import, red: import \> export).

#### Reproducible Procedures

The code chunk below contains the codes required to reproduce this visualization, along with the corresponding annotations which describes the procedures used.

```{r}
#| warning: false
#| fig-height: 10
#| fig-width: 15

#<< install development version from github
#install.packages("remotes")
#remotes::install_github("nsgrantham/ggbraid")

#<< PREPARING DATASET IN LONG FORMAT
country_import_long_1 <- import %>%
  select(-2, -3, -4, -5, -6, -7, -8) %>%                                    #<< remove uninterested columns (total, regional)
  pivot_longer(                                                             #<< pivot longer to convert columns to rows with values as new numeric values column
    cols = -c('date'), 
    names_to = "country",
    values_transform = as.numeric,
    values_to = "import")

country_export_long_1 <- export %>%
  select(-2, -3, -4, -5, -6, -7, -8) %>%                                    #<< remove uninterested columns (total, regional)
  pivot_longer(                                                             #<< pivot longer to convert columns to rows with values as new numeric values column
    cols = -c('date'), 
    names_to = "country",
    values_transform = as.numeric,
    values_to = "export") 

country_long_1 <- inner_join(country_export_long_1,                         #<< combining import and export dataset
                             country_import_long_1) %>%             
  pivot_longer(                                                             #<< pivot longer to convert columns to rows with values as new numeric values column
    cols = c('export', 'import'), 
    names_to = "Merc_Trade",
    values_transform = as.numeric,
    values_to = "TradeValue") %>%
  mutate(TradeValue_bil = round(TradeValue/1000000000,1))                   #<< rounding value to billions

top15countries <- country_long_1 %>%                                        #<< Derive Top 5 trading partner countries during period
  select(country, TradeValue) %>%                                           
  group_by(country)  %>%                                                    #<< Group by countries , sum import / export
  summarise(sum_TV=sum(TradeValue),
            .groups = 'drop') %>%
  arrange(desc(sum_TV)) %>%                                                 #<< Sort countries by trade value in descending order
  slice(0:15)                                                               #<< select top 15 countries

#<< create a wide data format
country_long_1_top15_wide <- inner_join(country_long_1, 
                              top15countries) %>%
   select(date, country, Merc_Trade, TradeValue_bil) %>%
   pivot_wider(names_from = Merc_Trade,
             values_from = TradeValue_bil)

#<< create long dataset for top 15 countries
country_long_1_top5_long <- inner_join(country_long_1, 
                              top15countries)

ggplot() +
  geom_line(aes(date, TradeValue_bil, linetype = Merc_Trade),               #<< plotting geomline, with Merc_Trade to distinguish the lines
            data = country_long_1_top5_long, size=1) +
  ggbraid::geom_braid(aes(x = date,                                         #<< using geom_braid to highlight the areas between the 2 lines
                  ymin = import,
                  ymax = export,
                  fill = import < export), 
                  data = country_long_1_top15_wide,
              alpha = 0.6
              ) +
  guides(linetype = "none", fill = "none") +
  hrbrthemes::theme_ipsum(grid="Y") +                                       #<< setting of plot theme
  facet_wrap(~country, ncol = 5) +                                          #<< facet wrap for trellis plot
    labs(title = "Monthly Export & Import Trade Values: Top 6 Trading Partners (Jan20-Dec22)",
         caption = "Note: The shaded green area represents Export value > Import value, indicating a trade surplus. \n The shaded red area represents Export value < Import value, indicating a trade deficit.") +
  ylab("Trade Value (in Billions)") +
  xlab("Time period") +
  theme(
    axis.title = element_text(size=8), 
    axis.text.x = element_text(size=6, angle=45, hjust = 1)
  )


```

#### Patterns Revealed by Visualisation

• Singapore's exports outweighs imports.

Visually from the plot, it is evident that the green area marginally appears more than the red area. This implies that singapore's exports outweigh imports. This finding is consistent with the trade summary referenced from [World Bank.org](https://wits.worldbank.org/CountrySnapshot/en/SGP/textview#:~:text=Singapore%2C%20Imports%20of%20goods%20and,percentage%20of%20GDP%20is%20176.24%20%25.).

• Exports to some countries grew during COVID-19 period

Zooming into the Mainland China, United States and Republic of Korea plot, from the 1st quarter of 2020, exports to these countries grew during the height of the pandemic before leveling off subsequently. In the case of Korea and US, the leveling off occurred earlier in 2021, while China only started in 2022, likely due to China's delayed post-pandemic opening.
