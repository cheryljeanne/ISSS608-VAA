---
title: "Take Home Exercise 04"
author: "Cheryl Jeanne Chiew"
date: "17 February 2023"
date-modified: "`r Sys.Date()`"
execute:
  echo: true
  eval: true
  warning: false
format: html
editor: visual
---

# 1. Introduction

This Take-Home Exercise seeks to uncover the impact of COVID-19 as well as the global economic and political dynamic in 2022 on Singapore's bi-lateral trade (i.e. Import, Export and Trade Balance) by using appropriate analytical visualisation techniques learned in Lesson 6: Itâ€™s About Time. 

The dataset selected for this exercise is sourced from [Singstat.gov.sg](https://www.singstat.gov.sg/find-data/search-by-theme/trade-and-investment/merchandise-trade/latest-data) and contains data on the *Merchandise Imports and Exports by Region / Market*.

For the purpose of this exercise, the study period will be conducted from January 2020 to December 2022.


# 2. Data Visualization

#### Installing and Loading R Packages

```{r}
pacman::p_load(readxl, dplyr, tidyverse, lubridate, knitr, patchwork, CGPfunctions, gganimate, gapminder, treemapify, ggiraph, ggthemes) 
```

#### Importing Data

```{r}
#| warning: false
import_data <- read_xlsx("data/outputFile.xlsx",
                         sheet = "T1",                    #<< select sheet T2
                         range = "A10:UT129",             #<< only read specified cell range 
                         na = "na")                       #<< treat na as missing values

export_data <- read_xlsx("data/outputFile.xlsx",
                         sheet = "T2",                    #<< select sheet T2
                         range = "A10:UT101",             #<< only read specified cell range
                         na = "na")                       #<< treat na as missing values
```

#### Data Preparation / Data Output

::: {.panel-tabset}

## Import Dataset
```{r}
#| warning: false

#<< remove spaces in column names
colnames(import_data) <- gsub(" ", "", colnames(import_data), fixed = TRUE)

import <- import_data %>%
  pivot_longer(                                                       #<< pivot longer to convert columns to rows with values as new numeric values column
     cols = `2023Jan`:`1976Jan`, 
     names_to = "date",
     values_transform = as.numeric,
     values_to = "value") %>%
  replace(is.na(.), 0) %>%                                            #<< replace all NA values with zero
  pivot_wider(                                                        #<< pivot wider to convert dataseries column to columns
    names_from = DataSeries,
    values_from = value
  ) %>%
  mutate(date = ym(date)) %>%                                         #<< convert values to date
  mutate_at(vars(contains('Thousand Dollars')), ~ (. *1000)) %>%      #<< if column contains THOUSAND, multiply values by 1000
  mutate_at(vars(contains('Million Dollars')), ~ (. *1000000)) %>%    #<< if column contains THOUSAND, multiply values by 1000000
  filter(between(date, as.Date('2020-01-01'), as.Date('2022-12-01'))) #<< filter for date range Jan20 - Dec22

#<< remove thousand dollar string from column name
colnames(import) <- gsub(" (Thousand Dollars)", "", colnames(import), fixed = TRUE)

#<< remove million dollar string from column name            
colnames(import) <- gsub(" (Million Dollars)", "", colnames(import), fixed = TRUE)  

#<< remove symbols from column names
colnames(import) <- str_replace_all(colnames(import), "[^[:alnum:]]", "")

kable(head(import))

```

## Export Dataset
```{r}
#| warning: false

#<< remove spaces in column names
colnames(export_data) <- gsub(" ", "", colnames(export_data), fixed = TRUE)

export <- export_data %>%
  pivot_longer(                                                       #<< pivot longer to convert columns to rows with values as new numeric values column
     cols = `2023Jan`:`1976Jan`, 
     names_to = "date",
     values_transform = as.numeric,
     values_to = "value") %>%
  replace(is.na(.), 0) %>%                                            #<< replace all NA values with zero
  pivot_wider(                                                        #<< pivot wider to convert dataseries column to columns
    names_from = DataSeries,
    values_from = value
  ) %>%
  mutate(date = ym(date)) %>%                                         #<< convert values to date
  mutate_at(vars(contains('Thousand Dollars')), ~ (. *1000)) %>%      #<< if column contains THOUSAND, multiply values by 1000
  mutate_at(vars(contains('Million Dollars')), ~ (. *1000000)) %>%    #<< if column contains THOUSAND, multiply values by 1000000
  filter(between(date, as.Date('2020-01-01'), as.Date('2022-12-01'))) #<< filter for date range Jan20 - Dec22

#<< remove thousand dollar string from column name
colnames(export) <- gsub(" (Thousand Dollars)", "", colnames(export), fixed = TRUE)

#<< remove million dollar string from column name            
colnames(export) <- gsub(" (Million Dollars)", "", colnames(export), fixed = TRUE)  

#<< remove symbols from column names
colnames(export) <- str_replace_all(colnames(export), "[^[:alnum:]]", "")

kable(head(export))

```

:::


#### Plotting the Data


## TREEMAP ANIMATION BY COUNTRIES

#### Selection & Design Consideration


#### Reproducible Procedures

The code chunk below contains the codes required to reproduce this visualization, along with the corresponding annotations which describes the procedures used.

```{r}
#| warning: false
#| output: false

country_import_long <- import %>%
  select(-2, -3, -4, -5, -6, -7, -8) %>%
  pivot_longer(                                                             #<< pivot longer to convert columns to rows with values as new numeric values column
     cols = -c('date'), 
     names_to = "country",
     values_transform = as.numeric,
     values_to = "import_value") %>%
  mutate(val_mil = round(import_value/1000000,1)) %>%                       #<< rounding values to millions for easy viewability
  mutate(val_mil = format(round(as.numeric(val_mil), 1), nsmall=1, big.mark=",")) %>%
  unite("labels", country,val_mil, sep = "\n", remove = FALSE)              #<< create treemap labels

p1 <- country_import_long %>%
  filter(import_value > 0) %>%                                              #<< remove country lines where import value = 0
  ggplot(aes(area = import_value, fill = import_value, label = labels)) +   #<< ggplot function - set area / fill / labels
  theme(legend.position = "none",                                     
        plot.title = element_text(size = 25, face = "bold"),
        plot.caption = element_text(size = 15)) +
  geom_treemap() +                                                          #<< plot treemap - default squarify layout
  geom_treemap_text(place = "centre", grow = TRUE, colour = "white") +      #<< label text to grow and fill square size
  transition_time(date) +                                                   #<< transition based on time attribute
  ease_aes('linear') +                                                      #<< linear progression
  labs(title = "SG Bilateral Trade Imports - Period: {frame_time}",         #<< setting of Plot Title and Caption
       caption = "The area of each tile represents the value of SG's imports (in millions) by Country")

#<< save animation as gif file, set number of frames and plot size
anim_save("animated_treemap_import.gif", p1, nframes = 216, width = 600, height = 600)

country_export_long <- export %>%
  select(-2, -3, -4, -5, -6, -7, -8) %>%
  pivot_longer(                                                             #<< pivot longer to convert columns to rows with values as new numeric values column
     cols = -c('date'), 
     names_to = "country",
     values_transform = as.numeric,
     values_to = "export_value") %>%
  mutate(val_mil = round(export_value/1000000,1)) %>%                       #<< rounding values to millions for easy viewability
  mutate(val_mil = format(round(as.numeric(val_mil), 1), nsmall=1, big.mark=",")) %>%
  unite("labels", country,val_mil, sep = "\n", remove = FALSE)              #<< create treemap labels

p2 <- country_export_long %>%
  filter(export_value > 0) %>%                                              #<< remove country lines where import value = 0
  ggplot(aes(area = export_value, fill = export_value, label = labels)) +   #<< ggplot function - set area / fill / labels
  theme(legend.position = "none", 
        plot.title = element_text(size = 25, face = "bold"),
        plot.caption = element_text(size = 15)) +
  geom_treemap() +                                                          #<< plot treemap - default squarify layout
  geom_treemap_text(place = "centre", grow = TRUE, colour = "white") +      #<< label text to grow and fill square size
  transition_time(date) +                                                   #<< transition based on time attribute
  ease_aes('linear') +                                                      #<< linear progression
  labs(title = "SG Bilateral Trade Exports - Period: {frame_time}",         #<< setting of Plot Title and Caption
       caption = "The area of each tile represents the value of SG's imports (in millions) by Country")

#<< save animation as gif file, set number of frames and plot size
anim_save("animated_treemap_export.gif", p2, nframes = 216, width = 600, height = 600)

```

#### Patterns Revealed by Visualisation



## TOP 6 TRADING PARTNERS STACKED BAR CHART

#### Selection & Design Consideration


#### Reproducible Procedures

The code chunk below contains the codes required to reproduce this visualization, along with the corresponding annotations which describes the procedures used.

```{r}
#| warning: false
#| fig-height: 10
#| fig-width: 15

country_import_long_1 <- import %>%
  select(-2, -3, -4, -5, -6, -7, -8) %>%
  pivot_longer(                                                             #<< pivot longer to convert columns to rows with values as new numeric values column
     cols = -c('date'), 
     names_to = "country",
     values_transform = as.numeric,
     values_to = "import")

country_export_long_1 <- export %>%
  select(-2, -3, -4, -5, -6, -7, -8) %>%
  pivot_longer(                                                             #<< pivot longer to convert columns to rows with values as new numeric values column
     cols = -c('date'), 
     names_to = "country",
     values_transform = as.numeric,
     values_to = "export")

country_long_1 <- inner_join(country_export_long_1, country_import_long_1) %>%
  pivot_longer(                                                             #<< pivot longer to convert columns to rows with values as new numeric values column
     cols = c('export', 'import'), 
     names_to = "Merc_Trade",
     values_transform = as.numeric,
     values_to = "TradeValue") %>%
  mutate(TradeValue_bil = round(TradeValue/1000000000,1))

#<< Derive Top 9 highest Pop by PA
top9countries <- country_long_1 %>%
  select(country, TradeValue) %>%               #<< Select PA and Pop columns
  group_by(country)  %>%                 #<< Group by PA, sum Pop into sum_Pop column
  summarise(sum_TV=sum(TradeValue),
            .groups = 'drop') %>%
  arrange(desc(sum_TV)) %>%        #<< Sort PA by sum_Pop in descending order
  slice(0:5)

#<< Inner join back to main dataset to get full data only for the Top 9 PA
country_long_1_top5 <- inner_join(country_long_1, 
                              top9countries) %>%
  mutate(year = year(date)) %>%
  select(year, country, Merc_Trade, TradeValue, TradeValue_bil) %>%               #<< Select PA and Pop columns
  group_by(year, country, Merc_Trade)  %>%                 #<< Group by PA, sum Pop into sum_Pop column
  summarise(sum_TV=sum(TradeValue),
            sum_TV_bil=sum(TradeValue_bil),
            .groups = 'drop') %>%
  arrange(year, desc(sum_TV))

country_long_1_top5$tooltip <- c(paste0(     #<<
  "Country = ", country_long_1_top5$country,         #<<
  "\n Trade Type = ", country_long_1_top5$Merc_Trade,
  "\n Trade Value (bn) = $", country_long_1_top5$sum_TV_bil)) #<<

p <- ggplot(country_long_1_top5, aes(fill=Merc_Trade, y=sum_TV/1000000000, x = country, label = sum_TV_bil)) +
  geom_bar_interactive(aes(tooltip = tooltip), position="stack", stat="identity") +
  geom_text(position = position_stack(vjust = 0.5), size = 2, color = "#ffffff") +
  theme(legend.position="bottom") +
  guides(fill=guide_legend(title="Merchandise Trade Type")) +
  ggtitle("Singapore Merchandise Trade with Major Partners") +
  ylab("Trade Value (in Billions)") +
  xlab("Trade Partner (by Country))") +
  #scale_x_discrete(guide = guide_axis(n.dodge=3)) +
  theme(
    axis.title = element_text(size=8), 
    axis.text.x = element_text(size=6, angle=45, hjust = 1), 
    legend.title = element_text(size=6), #change legend title font size
    legend.text = element_text(size=6), 
    legend.key.size = unit(0.25, 'cm')
  ) + 
  facet_wrap(~ year, ncol=3)

girafe(                                  #<<
  ggobj = p,                             #<<
  width_svg = 6,                         #<<
  height_svg = 6*0.618                   #<<   
)                                        #<<
```

#### Patterns Revealed by Visualisation




## TOP 6 TRADING PARTNERS CYCLE PLOT

#### Selection & Design Consideration


#### Reproducible Procedures

The code chunk below contains the codes required to reproduce this visualization, along with the corresponding annotations which describes the procedures used.

```{r}
#| warning: false
#| fig-height: 10
#| fig-width: 15

#<< install development version from github
#install.packages("remotes")
#remotes::install_github("nsgrantham/ggbraid")

country_long_1_top5_wide <- inner_join(country_long_1, 
                              top9countries) %>%
   select(date, country, Merc_Trade, TradeValue_bil) %>%
  pivot_wider(names_from = Merc_Trade,
             values_from = TradeValue_bil)

country_long_1_top5_long <- inner_join(country_long_1, 
                              top9countries)

library(ggbraid)
library(ggplot2)


head(country_long_1_top5_long)

ggplot() +
  geom_line(aes(date, TradeValue_bil, linetype = Merc_Trade), data = country_long_1_top5_long, size=1) +
  geom_braid(aes(x = date,
                  ymin = import,
                  ymax = export,
                  fill = import < export), 
                  data = country_long_1_top5_wide,
              alpha = 0.6
              ) +
  guides(linetype = "none", fill = "none") +
  facet_wrap(~country, ncol = 5) +
    labs(title = "Monthly Export & Import Trade Values of Top 6 Trading Partners, Jan20-Dec22",         #<< setting of Plot Title and Caption
       caption = "Note: The shaded green area represents Export value > Import value, indicating a trade surplus. \n The shaded red area represents Export value < Import value, indicating a trade deficit.") +
  ylab("Trade Value (in Billions)") +
  xlab("Time period") +
  theme(
    axis.title = element_text(size=8), 
    axis.text.x = element_text(size=6, angle=45, hjust = 1)
  )

  
  


```

#### Patterns Revealed by Visualisation










```{r}
#| fig-height: 12
#| fig-width: 10
#| output: false

country_import_long <- import %>%
  select(-2, -3, -4, -5, -6, -7, -8) %>%
  pivot_longer(                                                       #<< pivot longer to convert columns to rows with values as new numeric values column
     cols = -c('date'), 
     names_to = "country",
     values_transform = as.numeric,
     values_to = "value")

p1 <- country_import_long %>% 
  filter(date == "2022-12-01" | date == "2020-01-01") %>% 
  mutate(date = year(date),
         date = factor(date), 
         value = value / 1000000000,
         value = round(value,3)) %>%
  newggslopegraph(date, value, country,
                Title = "Singapore Merchandise Imports with Major Partners",
                SubTitle = "2020 - 2022",
                Caption = "Singstat.gov.sg")

country_export_long <- export %>%
  select(-2, -3, -4, -5, -6, -7, -8) %>%
  pivot_longer(                                                       #<< pivot longer to convert columns to rows with values as new numeric values column
     cols = -c('date'), 
     names_to = "country",
     values_transform = as.numeric,
     values_to = "value")

p2 <- country_export_long %>% 
  filter(date == "2022-12-01" | date == "2020-01-01") %>% 
  mutate(date = year(date),
         date = factor(date), 
         value = value / 1000000000,
         value = round(value,3)) %>%
  newggslopegraph(date, value, country,
                Title = "Singapore Merchandise Exports with Major Partners",
                SubTitle = "2020 - 2022",
                Caption = "Singstat.gov.sg")

p1+p2



```

total_data_wide <- inner_join(import[,1:2],
                         export[,1:2]) 


total_data_long <- total_data_wide %>%
  pivot_longer(                                                       #<< pivot longer to convert columns to rows with values as new numeric values column
     cols = c('TotalMerchandiseImports','TotalMerchandiseExports'), 
     names_to = "tradetype",
     values_transform = as.numeric,
     values_to = "value")

head(total_data_long)

head(total_data_wide)

devtools::install_github('Ather-Energy/ggTimeSeries')

# base plot
p1 = ggplot(total_data_long, aes(x = date, y = value, group = tradetype, fill = tradetype)) +
  ggTimeSeries::stat_steamgraph()


##Retain all countries, pick out nuances


##cycle plot
##slope graphs
