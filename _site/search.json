[
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html",
    "title": "Take Home Exercise 04",
    "section": "",
    "text": "This Take-Home Exercise seeks to uncover the impact of COVID-19 as well as the global economic and political dynamic in 2022 on Singapore’s bi-lateral trade (i.e. Import, Export and Trade Balance) by using appropriate analytical visualisation techniques learned in Lesson 6: It’s About Time.\nThe dataset selected for this exercise is sourced from Singstat.gov.sg and contains data on the Merchandise Imports and Exports by Region / Market.\nFor the purpose of this exercise, the study period will be conducted from January 2020 to December 2022."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#treemap-animation-by-countries",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#treemap-animation-by-countries",
    "title": "Take Home Exercise 04",
    "section": "TREEMAP ANIMATION: BY COUNTRIES",
    "text": "TREEMAP ANIMATION: BY COUNTRIES\n\nSelection & Design Consideration\nThe treemap plot has been selected to visualize Singapore’s largest trading partners by import and export values:\n• Treemaps are able to effectively depict the relative sizes of a country’s trade value at a high level, allowing for quick perception of the countries that are large contributors. • The sequential colour scale helps the user easily identify larger trading partner countries compared to other countries in the same group. • An animation mapping feature has also been incorporated to allow users to visually see the changes across the time period.\n\n\nReproducible Procedures\nThe code chunk below contains the codes required to reproduce this visualization, along with the corresponding annotations which describes the procedures used.\n\n#<< PREPARING DATASET IN LONG FORMAT\ncountry_import_long <- import %>%\n  select(-2, -3, -4, -5, -6, -7, -8) %>%\n  pivot_longer(                                                             #<< pivot longer to convert columns to rows with values as new numeric values column\n     cols = -c('date'), \n     names_to = \"country\",\n     values_transform = as.numeric,\n     values_to = \"import_value\") %>%\n  mutate(val_mil = round(import_value/1000000,1),                           #<< rounding values to millions for easy viewability\n         val_mil = \n           format(round(as.numeric(val_mil), 1), nsmall=1, big.mark=\",\")    #<< formatting to add thousands separator\n         ) %>%\n  unite(\"labels\", country,val_mil, sep = \"\\n\", remove = FALSE)              #<< create treemap labels\n\n#<< PLOTTING IMPORT TREEMAP\np1 <- country_import_long %>%\n  filter(import_value > 0) %>%                                              #<< remove country lines where import value = 0\n  ggplot(aes(area = import_value, fill = import_value, label = labels)) +   #<< ggplot function - set area / fill / labels\n  theme(legend.position = \"none\",                                     \n        plot.title = element_text(size = 25, face = \"bold\"),\n        plot.caption = element_text(size = 15)) +\n  geom_treemap() +                                                          #<< plot treemap - default squarify layout\n  geom_treemap_text(place = \"centre\", grow = TRUE, colour = \"white\") +      #<< label text to grow and fill square size\n  transition_time(date) +                                                   #<< transition based on time attribute\n  ease_aes('linear') +                                                      #<< linear progression\n  labs(title = \"SG Bilateral Trade Imports - Period: {frame_time}\",         #<< setting of Plot Title and Caption\n       caption = \"The area of each tile represents the value of SG's imports (in millions) by Country\")\n\n#<< save animation as gif file, set number of frames and plot size\nanim_save(\"animated_treemap_import.gif\", p1, nframes = 216, width = 600, height = 600)\n\n#<< PREPARING DATASET IN LONG FORMAT\ncountry_export_long <- export %>%\n  select(-2, -3, -4, -5, -6, -7, -8) %>%\n  pivot_longer(                                                             #<< pivot longer to convert columns to rows with values as new numeric values column\n     cols = -c('date'), \n     names_to = \"country\",\n     values_transform = as.numeric,\n     values_to = \"export_value\") %>%\n  mutate(val_mil = round(export_value/1000000,1),                           #<< rounding values to millions for easy viewability\n         val_mil = \n           format(round(as.numeric(val_mil), 1), nsmall=1, big.mark=\",\")    #<< formatting to add thousands separator\n         ) %>%\n  unite(\"labels\", country,val_mil, sep = \"\\n\", remove = FALSE)              #<< create treemap labels\n\n#<< PLOTTING IMPORT TREEMAP\np2 <- country_export_long %>%\n  filter(export_value > 0) %>%                                              #<< remove country lines where import value = 0\n  ggplot(aes(area = export_value, fill = export_value, label = labels)) +   #<< ggplot function - set area / fill / labels\n  theme(legend.position = \"none\", \n        plot.title = element_text(size = 25, face = \"bold\"),\n        plot.caption = element_text(size = 15)) +\n  geom_treemap() +                                                          #<< plot treemap - default squarify layout\n  geom_treemap_text(place = \"centre\", grow = TRUE, colour = \"white\") +      #<< label text to grow and fill square size\n  transition_time(date) +                                                   #<< transition based on time attribute\n  ease_aes('linear') +                                                      #<< linear progression\n  labs(title = \"SG Bilateral Trade Exports - Period: {frame_time}\",         #<< setting of Plot Title and Caption\n       caption = \"The area of each tile represents the value of SG's imports (in millions) by Country\")\n\n#<< save animation as gif file, set number of frames and plot size\nanim_save(\"animated_treemap_export.gif\", p2, nframes = 216, width = 600, height = 600)\n\n\n\n\n\n\n\nSG Trade Imports: Jan 2020 - Dec 2022\n\n\n\n\n\n\n\nSG Trade Exports: Jan 2020 - Dec 2022\n\n\n\n\n\n\n\nPatterns Revealed by Visualisation\nChina, Malaysia, Taiwan, United States are Singapore’s major trading partners.\nThis has not significantly changed during the COVID-19 period. From the trade value displayed within the treemap grids, the COVID-19 effect was evident, where both import and export values of the top countries ranged around $5bn at the peak of the COVID-19 period (year 2020), before rising to ~$7bn in the years after."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#stacked-bar-chart-top-6-trading-partners",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#stacked-bar-chart-top-6-trading-partners",
    "title": "Take Home Exercise 04",
    "section": "STACKED BAR CHART: TOP 6 TRADING PARTNERS",
    "text": "STACKED BAR CHART: TOP 6 TRADING PARTNERS\n\nSelection & Design Consideration\n\n\nReproducible Procedures\nThe code chunk below contains the codes required to reproduce this visualization, along with the corresponding annotations which describes the procedures used.\n\n#<< PREPARING DATASET IN LONG FORMAT\ncountry_import_long_1 <- import %>%\n  select(-2, -3, -4, -5, -6, -7, -8) %>%                                    #<< remove uninterested columns (total, regional)\n  pivot_longer(                                                             #<< pivot longer to convert columns to rows with values as new numeric values column\n     cols = -c('date'), \n     names_to = \"country\",\n     values_transform = as.numeric,\n     values_to = \"import\")\n\ncountry_export_long_1 <- export %>%\n  select(-2, -3, -4, -5, -6, -7, -8) %>%                                    #<< remove uninterested columns (total, regional)\n  pivot_longer(                                                             #<< pivot longer to convert columns to rows with values as new numeric values column\n     cols = -c('date'), \n     names_to = \"country\",\n     values_transform = as.numeric,\n     values_to = \"export\")\n\ncountry_long_1 <- inner_join(country_export_long_1,                         #<< combining import and export dataset\n                             country_import_long_1) %>%             \n  pivot_longer(                                                             #<< pivot longer to convert columns to rows with values as new numeric values column\n     cols = c('export', 'import'), \n     names_to = \"Merc_Trade\",\n     values_transform = as.numeric,\n     values_to = \"TradeValue\") %>%\n  mutate(TradeValue_bil = round(TradeValue/1000000000,1))                   #<< rounding value to billions\n\n\ntop5countries <- country_long_1 %>%                                         #<< Derive Top 5 trading partner countries during period\n  select(country, TradeValue) %>%                                           \n  group_by(country)  %>%                                                    #<< Group by countries , sum import / export\n  summarise(sum_TV=sum(TradeValue),\n            .groups = 'drop') %>%\n  arrange(desc(sum_TV)) %>%                                                 #<< Sort countries by trade value in descending order\n  slice(0:15)                                                                #<< select top 5 countries\n\n#<< Inner join back to main dataset to get full data only for the Top 5 countries\ncountry_long_1_top5 <- inner_join(country_long_1, \n                              top5countries) %>%\n  mutate(year = year(date)) %>%\n  select(year, country, Merc_Trade, TradeValue, TradeValue_bil) %>%               \n  group_by(year, country, Merc_Trade)  %>%                                  #<< derive trade values grouped by year, country and trade type\n  summarise(sum_TV=sum(TradeValue),\n            sum_TV_bil=sum(TradeValue_bil),\n            .groups = 'drop') %>%\n  arrange(year, desc(sum_TV))\n\ncountry_long_1_top5$tooltip <- c(paste0(                                    #<< Creating annotations for tooltip\n  \"Country = \", country_long_1_top5$country,\n  \"\\n Trade Type = \", country_long_1_top5$Merc_Trade,\n  \"\\n Trade Value (bn) = $\", country_long_1_top5$sum_TV_bil))\n\np <- ggplot(country_long_1_top5, \n            aes(fill=Merc_Trade, y=sum_TV/1000000000, x = country, label = sum_TV_bil)) +\n  hrbrthemes::theme_ipsum(grid=\"Y\") +\n  geom_bar_interactive(aes(tooltip = tooltip), position=\"stack\", stat=\"identity\") +\n  geom_text(position = position_stack(vjust = 0.5), size = 2, color = \"#ffffff\") +\n  theme(legend.position=\"bottom\") +\n  guides(fill=guide_legend(title=\"Merchandise Trade Type\")) +\n  ggtitle(\"Singapore Merchandise Trade with Major Partners\") +\n  ylab(\"Trade Value (in Billions)\") +\n  xlab(\"Trade Partner (by Country))\") +\n  theme(\n    axis.title = element_text(size=8), \n    axis.text.x = element_text(size=8, angle=45, hjust = 0.75), \n    legend.title = element_text(size=8), #change legend title font size\n    legend.text = element_text(size=8), \n    legend.key.size = unit(0.3, 'cm')\n  ) + \n  facet_wrap(~ year, ncol = 1) ##increasing countries to 15 instead? \n\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 8,                        \n  height_svg = 10                   \n)                                       \n\n\n\n\n\n\n\nPatterns Revealed by Visualisation"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#top-6-trading-partners-cycle-plot",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#top-6-trading-partners-cycle-plot",
    "title": "Take Home Exercise 04",
    "section": "TOP 6 TRADING PARTNERS CYCLE PLOT",
    "text": "TOP 6 TRADING PARTNERS CYCLE PLOT\n\nSelection & Design Consideration\n\n\nReproducible Procedures\nThe code chunk below contains the codes required to reproduce this visualization, along with the corresponding annotations which describes the procedures used.\n\n#<< install development version from github\n#install.packages(\"remotes\")\n#remotes::install_github(\"nsgrantham/ggbraid\")\n\n#<< use dataframe from previous plot to create a wide data format\ncountry_long_1_top5_wide <- inner_join(country_long_1, \n                              top5countries) %>%\n   select(date, country, Merc_Trade, TradeValue_bil) %>%\n   pivot_wider(names_from = Merc_Trade,\n             values_from = TradeValue_bil)\n\n#<< create long dataset for top 5 countries\ncountry_long_1_top5_long <- inner_join(country_long_1, \n                              top5countries)\n\nggplot() +\n  geom_line(aes(date, TradeValue_bil, linetype = Merc_Trade), data = country_long_1_top5_long, size=1) +\n  ggbraid::geom_braid(aes(x = date,\n                  ymin = import,\n                  ymax = export,\n                  fill = import < export), \n                  data = country_long_1_top5_wide,\n              alpha = 0.6\n              ) +\n  guides(linetype = \"none\", fill = \"none\") +\n  hrbrthemes::theme_ipsum(grid=\"Y\") +\n  facet_wrap(~country, ncol = 5) +\n    labs(title = \"Monthly Export & Import Trade Values \\nTop 6 Trading Partners (Jan20-Dec22)\",\n         caption = \"Note: The shaded green area represents Export value > Import value, indicating a trade surplus. \\n The shaded red area represents Export value < Import value, indicating a trade deficit.\") +\n  ylab(\"Trade Value (in Billions)\") +\n  xlab(\"Time period\") +\n  theme(\n    axis.title = element_text(size=8), \n    axis.text.x = element_text(size=6, angle=45, hjust = 1)\n  )\n\n\n\n\n\n\nPatterns Revealed by Visualisation\nTOP 15Countries\n\ntop5countries <- country_long_1 %>%                                         #<< Derive Top 5 trading partner countries during period\n  select(country, TradeValue) %>%                                           \n  group_by(country)  %>%                                                    #<< Group by countries , sum import / export\n  summarise(sum_TV=sum(TradeValue),\n            .groups = 'drop') %>%\n  arrange(desc(sum_TV)) %>%                                                 #<< Sort countries by trade value in descending order\n  slice(0:15)   \n\n#<< use dataframe from previous plot to create a wide data format\ncountry_long_1_top5_wide <- inner_join(country_long_1, \n                              top5countries) %>%\n   select(date, country, Merc_Trade, TradeValue_bil) %>%\n   pivot_wider(names_from = Merc_Trade,\n             values_from = TradeValue_bil)\n\n#<< create long dataset for top 5 countries\ncountry_long_1_top5_long <- inner_join(country_long_1, \n                              top5countries)\n\nggplot() +\n  geom_line(aes(date, TradeValue_bil, linetype = Merc_Trade), data = country_long_1_top5_long, size=1) +\n  ggbraid::geom_braid(aes(x = date,\n                  ymin = import,\n                  ymax = export,\n                  fill = import < export), \n                  data = country_long_1_top5_wide,\n              alpha = 0.6\n              ) +\n  guides(linetype = \"none\", fill = \"none\") +\n  hrbrthemes::theme_ipsum(grid=\"Y\") +\n  facet_wrap(~country, ncol = 5) +\n    labs(title = \"Monthly Export & Import Trade Values \\nTop 6 Trading Partners (Jan20-Dec22)\",\n         caption = \"Note: The shaded green area represents Export value > Import value, indicating a trade surplus. \\n The shaded red area represents Export value < Import value, indicating a trade deficit.\") +\n  ylab(\"Trade Value (in Billions)\") +\n  xlab(\"Time period\") +\n  theme(\n    axis.title = element_text(size=8), \n    axis.text.x = element_text(size=6, angle=45, hjust = 1)\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html",
    "title": "Hands On Exercise 06",
    "section": "",
    "text": "pacman::p_load(sf, tmap, tidyverse)\n\n\n\n\nsgpools <- read_csv(\"data/aspatial/SGPools_svy21.csv\")\n\nlist(sgpools) \n\n[[1]]\n# A tibble: 306 × 7\n   NAME                            ADDRESS POSTC…¹ XCOORD YCOORD OUTLE…² Gp1Gp…³\n   <chr>                           <chr>     <dbl>  <dbl>  <dbl> <chr>     <dbl>\n 1 Livewire (Marina Bay Sands)     2 Bayf…   18972 30842. 29599. Branch        5\n 2 Livewire (Resorts World Sentos… 26 Sen…   98138 26704. 26526. Branch       11\n 3 SportsBuzz (Kranji)             Lotus …  738078 20118. 44888. Branch        0\n 4 SportsBuzz (PoMo)               1 Sele…  188306 29777. 31382. Branch       44\n 5 Prime Serangoon North           Blk 54…  552542 32239. 39519. Branch        0\n 6 Singapore Pools Woodlands Cent… 1A Woo…  731001 21012. 46987. Branch        3\n 7 Singapore Pools 64 Circuit Rd … Blk 64…  370064 33990. 34356. Branch       17\n 8 Singapore Pools 88 Circuit Rd … Blk 88…  370088 33847. 33976. Branch       16\n 9 Singapore Pools Anchorvale Rd … Blk 30…  540308 33910. 41275. Branch       21\n10 Singapore Pools Ang Mo Kio N2 … Blk 20…  560202 29246. 38943. Branch       25\n# … with 296 more rows, and abbreviated variable names ¹​POSTCODE,\n#   ²​`OUTLET TYPE`, ³​`Gp1Gp2 Winnings`\n\n\n\n\n\n\nsgpools_sf <- st_as_sf(sgpools, \n                       coords = c(\"XCOORD\", \"YCOORD\"),    #<< this combines the x (long) and y (lat) coordinate fields\n                       crs= 3414)                         #<< CRS - projection code that a country uses (SVY21)\n\nlist(sgpools_sf)\n\n[[1]]\nSimple feature collection with 306 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 7844.194 ymin: 26525.7 xmax: 45176.57 ymax: 47987.13\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 306 × 6\n   NAME                ADDRESS POSTC…¹ OUTLE…² Gp1Gp…³            geometry\n * <chr>               <chr>     <dbl> <chr>     <dbl>         <POINT [m]>\n 1 Livewire (Marina B… 2 Bayf…   18972 Branch        5 (30841.56 29598.56)\n 2 Livewire (Resorts … 26 Sen…   98138 Branch       11  (26703.87 26525.7)\n 3 SportsBuzz (Kranji) Lotus …  738078 Branch        0 (20117.93 44888.06)\n 4 SportsBuzz (PoMo)   1 Sele…  188306 Branch       44 (29776.95 31382.18)\n 5 Prime Serangoon No… Blk 54…  552542 Branch        0 (32238.69 39518.76)\n 6 Singapore Pools Wo… 1A Woo…  731001 Branch        3 (21012.15 46987.32)\n 7 Singapore Pools 64… Blk 64…  370064 Branch       17 (33990.39 34355.53)\n 8 Singapore Pools 88… Blk 88…  370088 Branch       16 (33847.38 33976.04)\n 9 Singapore Pools An… Blk 30…  540308 Branch       21 (33909.93 41274.52)\n10 Singapore Pools An… Blk 20…  560202 Branch       25  (29246.06 38942.6)\n# … with 296 more rows, and abbreviated variable names ¹​POSTCODE,\n#   ²​`OUTLET TYPE`, ³​`Gp1Gp2 Winnings`\n\n\n\n\n\nSingle Map\n\ntmap_mode(\"view\") #<< \"plot\" = static plot of the map (no tooltip)\n\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"OUTLET TYPE\",          #<< split colour by outlet type\n          size = \"Gp1Gp2 Winnings\",      #<< shape size by winnings\n          border.col = \"black\",          #<< shape border\n          border.lwd = 1)\n\n\n\n\n\n\nDouble Map\n\ntm_shape(sgpools_sf) +\n  tm_bubbles(col = \"OUTLET TYPE\", \n          size = \"Gp1Gp2 Winnings\",\n          border.col = \"black\",\n          border.lwd = 1) +\n  tm_facets(by= \"OUTLET TYPE\",           #<< facetting by outlet type\n            nrow = 1,\n            sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#choropleth-mapping",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#choropleth-mapping",
    "title": "Hands On Exercise 06",
    "section": "Choropleth Mapping",
    "text": "Choropleth Mapping\n\nInstalling and Loading R Packages\n\npacman::p_load(sf, tmap, tidyverse)\n\n\nImporting Data\n\nmpsz <- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\cheryljeanne\\ISSS608-VAA\\Hands-on_Ex\\Hands-on_Ex07\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\npopdata <- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\n\n\nData Preparation\n\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%                    #<< only use 2020 data\n  group_by(PA, SZ, AG) %>%                    #<< group by PA, SZ, AG\n  summarise(`POP` = sum(`Pop`)) %>%           #<< sum Pop\n  ungroup()%>%\n  pivot_wider(names_from=AG,                  #<< change to wide data format - AG into columns\n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])              #<< create new columns, sum rows by index\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+ \nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %>%          #<< function converts all values to upper case\n  filter(`ECONOMY ACTIVE` > 0)\n\n#<< left side needs to be spatial data, else geometric map will be dropped- left join data with mapping coordinates\nmpsz_pop2020 <- left_join(mpsz, popdata2020,            \n                          by = c(\"SUBZONE_N\" = \"SZ\")) #<< sequence of field join has to follow the table sequence\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")\n\n\n\nPlotting\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#stacked-bar-chart-top-15-trading-partners",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#stacked-bar-chart-top-15-trading-partners",
    "title": "Take Home Exercise 04",
    "section": "STACKED BAR CHART: TOP 15 TRADING PARTNERS",
    "text": "STACKED BAR CHART: TOP 15 TRADING PARTNERS\n\nSelection & Design Consideration\nThe stacked bar chart has been selected to allow for easy comparison between countries. Given that the bars are proportional to the values represented, there was a risk that the countries with extreme high trading values would result in the data for “smaller countries” being compressed and hence hidden. As such, I decided to transform the dataset by using rate of change in % instead. This would allow for ease of comparison over the given time period between the countries based on % values. An interactive tooltip element was added as well to provide additional complementary information for users, displaying trade value in dollar terms as well as other associated information to the bar on hover.\n\n\nReproducible Procedures\nThe code chunk below contains the codes required to reproduce this visualization, along with the corresponding annotations which describes the procedures used.\n\ncountry_import_long_1 <- import %>%\n  select(-2, -3, -4, -5, -6, -7, -8) %>%                                    #<< remove uninterested columns (total, regional)\n  mutate(year = year(date)) %>%                                             #<< aggregate and sum values by year\n  aggregate(.~year, sum) %>%                                                \n  pivot_longer(                                                             #<< pivot longer to convert columns to rows with values as new numeric values column\n     cols = -c('date','year'), \n     names_to = \"country\",\n     values_transform = as.numeric,\n     values_to = \"import\") %>%\n  select(-c('date'))\n\ncountry_export_long_1 <- export %>%\n  select(-2, -3, -4, -5, -6, -7, -8) %>%                                    #<< remove uninterested columns (total, regional)\n  mutate(year = year(date)) %>%                                             #<< aggregate and sum values by year\n  aggregate(.~year, sum) %>%                                                \n  pivot_longer(                                                             #<< pivot longer to convert columns to rows with values as new numeric values column\n     cols = -c('date','year'), \n     names_to = \"country\",\n     values_transform = as.numeric,\n     values_to = \"export\") %>%\n  select(-c('date'))\n\ncountry_long_1 <- inner_join(country_export_long_1,                         #<< combining import and export dataset\n                             country_import_long_1) %>%             \n  pivot_longer(                                                             #<< pivot longer to convert columns to rows with values as new numeric values column\n     cols = c('export', 'import'), \n     names_to = \"Merc_Trade\",\n     values_transform = as.numeric,\n     values_to = \"TradeValue\") %>%\n    group_by(country, Merc_Trade) %>% \n  arrange(year, country, Merc_Trade) %>% \n  mutate(rateofchange                                                       #<< derive rate of change column\n         = 100 * (TradeValue - lag(TradeValue))/lag(TradeValue),\n         rateofchange = round(rateofchange,1)) %>%\n  ungroup() %>%\n  filter(year != 2020)                                                      #<< remove year 2020 as ROC will be NULL\n\ntop15countries <- country_long_1 %>%                                        #<< Derive Top 5 trading partner countries during period\n  select(country, TradeValue) %>%                                           \n  group_by(country)  %>%                                                    #<< Group by countries , sum import / export\n  summarise(sum_TV=sum(TradeValue),\n            .groups = 'drop') %>%\n  arrange(desc(sum_TV)) %>%                                                 #<< Sort countries by trade value in descending order\n  slice(0:15)                                                               #<< select top 15 countries\n\n#<< Inner join back to main dataset to get full data only for the Top 5 countries\ncountry_long_1_top15 <- inner_join(country_long_1, \n                              top15countries) %>%\n  mutate(TradeValue_bil = round(TradeValue/1000000000,1)) \n\ncountry_long_1_top15$tooltip <- c(paste0(                                   #<< Creating annotations for tooltip\n  \"Country = \", country_long_1_top15$country,\n  \"\\n Trade Type = \", country_long_1_top15$Merc_Trade,\n  \"\\n Trade Value (bn) = $\", country_long_1_top15$TradeValue_bil,\n  \"\\n Rate of % Change from prev year = \", country_long_1_top15$rateofchange))\n\np <- ggplot(country_long_1_top15,                                 \n            aes(fill=Merc_Trade, y=rateofchange, x = country, \n                label = rateofchange)) +\n  hrbrthemes::theme_ipsum(grid=\"Y\") +\n  geom_bar_interactive(                                                     #<< plotting interactive stacked bar\n    aes(tooltip = tooltip), position=\"stack\", stat=\"identity\") +\n  geom_text(\n    position = position_stack(vjust = 0.5), size = 2, color = \"#ffffff\") +\n  theme(legend.position=\"bottom\") +                                         #<< setting of themes, titles and legends\n  guides(fill=guide_legend(title=\"Merchandise Trade Type\")) +\n  ggtitle(\"Changes in SG Merchandise Trade: Top 15 Countries (2020-2022)\") +\n  ylab(\"Rate of Change in %\") +\n  xlab(\"Trade Partner (by Country))\") +\n  labs(caption = \"Note:2021 represents the rate of % change from 2020 to 2021 by import / export trade type.\\n2022 represents the rate of % change from 2021 to 2022 by import / export trade type.\") +\n  theme(\n    axis.title = element_text(size=8), \n    axis.text.x = element_text(size=8, angle=45, hjust = 0.75), \n    legend.title = element_text(size=8), #change legend title font size\n    legend.text = element_text(size=8), \n    legend.key.size = unit(0.3, 'cm')\n  ) + \n  facet_wrap(~ year, ncol = 1)                                              #<< facet wrap for trellis plot \n\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 8,                        \n  height_svg = 8                   \n)     \n\n\n\n\n\n\n\nPatterns Revealed by Visualisation\nAn interesting insight that was observed was that although Hong Kong is one of the top export countries for Singapore, exports to Hong Kong actually dropped year on year during the COVID-19 period. On the flipside, the UAE is ranked 13th out of the top 15 trading partners of Singapore, but the rate of change for both imports and exports ranked the highest amongst the countries."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#line-plot-top-15-trading-partners-time-series",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#line-plot-top-15-trading-partners-time-series",
    "title": "Take Home Exercise 04",
    "section": "LINE PLOT: TOP 15 TRADING PARTNERS TIME SERIES",
    "text": "LINE PLOT: TOP 15 TRADING PARTNERS TIME SERIES\n\nSelection & Design Consideration\nA line chart in a trellis format was selected to depict the time series trends of export and import trades.The differences between import and export values was also highlighted in a color coordinated format to allow the user to visually identify if the trading partner was a net exporter or importer (i.e., green: export > import, red: import > export).\n\n\nReproducible Procedures\nThe code chunk below contains the codes required to reproduce this visualization, along with the corresponding annotations which describes the procedures used.\n\n#<< install development version from github\n#install.packages(\"remotes\")\n#remotes::install_github(\"nsgrantham/ggbraid\")\n\n#<< PREPARING DATASET IN LONG FORMAT\ncountry_import_long_1 <- import %>%\n  select(-2, -3, -4, -5, -6, -7, -8) %>%                                    #<< remove uninterested columns (total, regional)\n  pivot_longer(                                                             #<< pivot longer to convert columns to rows with values as new numeric values column\n    cols = -c('date'), \n    names_to = \"country\",\n    values_transform = as.numeric,\n    values_to = \"import\")\n\ncountry_export_long_1 <- export %>%\n  select(-2, -3, -4, -5, -6, -7, -8) %>%                                    #<< remove uninterested columns (total, regional)\n  pivot_longer(                                                             #<< pivot longer to convert columns to rows with values as new numeric values column\n    cols = -c('date'), \n    names_to = \"country\",\n    values_transform = as.numeric,\n    values_to = \"export\") \n\ncountry_long_1 <- inner_join(country_export_long_1,                         #<< combining import and export dataset\n                             country_import_long_1) %>%             \n  pivot_longer(                                                             #<< pivot longer to convert columns to rows with values as new numeric values column\n    cols = c('export', 'import'), \n    names_to = \"Merc_Trade\",\n    values_transform = as.numeric,\n    values_to = \"TradeValue\") %>%\n  mutate(TradeValue_bil = round(TradeValue/1000000000,1))                   #<< rounding value to billions\n\ntop15countries <- country_long_1 %>%                                        #<< Derive Top 5 trading partner countries during period\n  select(country, TradeValue) %>%                                           \n  group_by(country)  %>%                                                    #<< Group by countries , sum import / export\n  summarise(sum_TV=sum(TradeValue),\n            .groups = 'drop') %>%\n  arrange(desc(sum_TV)) %>%                                                 #<< Sort countries by trade value in descending order\n  slice(0:15)                                                               #<< select top 15 countries\n\n#<< create a wide data format\ncountry_long_1_top15_wide <- inner_join(country_long_1, \n                              top15countries) %>%\n   select(date, country, Merc_Trade, TradeValue_bil) %>%\n   pivot_wider(names_from = Merc_Trade,\n             values_from = TradeValue_bil)\n\n#<< create long dataset for top 15 countries\ncountry_long_1_top5_long <- inner_join(country_long_1, \n                              top15countries)\n\nggplot() +\n  geom_line(aes(date, TradeValue_bil, linetype = Merc_Trade),               #<< plotting geomline, with Merc_Trade to distinguish the lines\n            data = country_long_1_top5_long, size=1) +\n  ggbraid::geom_braid(aes(x = date,                                         #<< using geom_braid to highlight the areas between the 2 lines\n                  ymin = import,\n                  ymax = export,\n                  fill = import < export), \n                  data = country_long_1_top15_wide,\n              alpha = 0.6\n              ) +\n  guides(linetype = \"none\", fill = \"none\") +\n  hrbrthemes::theme_ipsum(grid=\"Y\") +                                       #<< setting of plot theme\n  facet_wrap(~country, ncol = 5) +                                          #<< facet wrap for trellis plot\n    labs(title = \"Monthly Export & Import Trade Values: Top 6 Trading Partners (Jan20-Dec22)\",\n         caption = \"Note: The shaded green area represents Export value > Import value, indicating a trade surplus. \\n The shaded red area represents Export value < Import value, indicating a trade deficit.\") +\n  ylab(\"Trade Value (in Billions)\") +\n  xlab(\"Time period\") +\n  theme(\n    axis.title = element_text(size=8), \n    axis.text.x = element_text(size=6, angle=45, hjust = 1)\n  )\n\n\n\n\n\n\nPatterns Revealed by Visualisation\n• Singapore’s exports outweighs imports.\nVisually from the plot, it is evident that the green area marginally appears more than the red area. This implies that singapore’s exports outweigh imports. This finding is consistent with the trade summary referenced from World Bank.org.\n• Exports to some countries grew during COVID-19 period\nZooming into the Mainland China, United States and Republic of Korea plot, from the 1st quarter of 2020, exports to these countries grew during the height of the pandemic before leveling off subsequently. In the case of Korea and US, the leveling off occurred earlier in 2021, while China only started in 2022, likely due to China’s delayed post-pandemic opening."
  }
]