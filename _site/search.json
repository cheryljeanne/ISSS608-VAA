[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Hi There! My name is Cheryl. I’m a part time student currently pursuing the Master of IT in Business (MITB) programme with Singapore Management University (SMU)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "pacman::p_load(tidyverse, patchwork, \n               ggthemes, hrbrthemes,\n               ggrepel) \n\n\n\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "title": "In Class Exercise 04",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#running-code",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#running-code",
    "title": "In Class Exercise 04",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "title": "Hands On Exercise 05",
    "section": "",
    "text": "pacman::p_load(ggtern, plotly, tidyverse)\n\n\n\n\n\npop_data <- read_csv(\"data/respopagsex2000to2018_tidy.csv\") \n\n\n\n\n\nagpop_mutated <- pop_data %>%\n  mutate(`Year` = as.character(Year))%>%          #<< change datatype of YEAR to character\n  pivot_wider(names_from = AG, \n              values_from = Population) %>%       #<< transpose values from AG into columns\n  mutate(YOUNG = rowSums(.[4:8]))%>%              #<< sum of values by rows\n  mutate(ACTIVE = rowSums(.[9:16]))  %>%\n  mutate(OLD = rowSums(.[17:21])) %>%\n  mutate(TOTAL = rowSums(.[22:24])) %>%\n  filter(Year == 2018)%>%                         #<< filter for Year 2018 only\n  filter(TOTAL > 0)                               #<< filter where total count > 0\n\n\n\n\n\nggtern::ggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point() +\n  labs(title=\"Population structure, 2015\") +\n  theme_rgbw()\n\n\n\n\n\n\n\n\nlabel <- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\naxis <- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes <- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\"\n) %>%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#correlation-matrices",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#correlation-matrices",
    "title": "Hands On Exercise 05",
    "section": "Correlation Matrices",
    "text": "Correlation Matrices\n\nInstalling and Loading R Packages\n\npacman::p_load(corrplot, ggstatsplot, tidyverse)\n\n\n\nImporting Data\n\nwine <- read_csv(\"data/wine_quality.csv\")\n\n\n\nBasic Correlation Matrix\n\npairs(wine[,1:11])\n\n\n\n\n\n\nIncluding Plot with Correlation Coefficients\n\npanel.cor <- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr <- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr <- abs(cor(x, y, use=\"complete.obs\"))\ntxt <- format(c(r, 0.123456789), digits=digits)[1]\ntxt <- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)\n\n\n\n\n\n\nPlot using ggCorrmat\n\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n)\n\n\n\n\n\n\nVisualising using Corrplot Package\n\nwine.cor <- cor(wine[, 1:11])\n\ncorrplot(wine.cor, \n         method = \"ellipse\",     #<< appear as semicircle rather than full circle\n         type=\"lower\",           #<< only show the lower half\n         diag = FALSE,           #<< turn of diagonal cells\n         tl.col = \"black\")       #<< axis labels to black\n\n\n\n\n\n\nIncluding numerical data in matrix\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\",     #<< appear as semicircle rather than full circle\n               upper = \"number\",      #<< show numbers in upper side\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\nIncluding test of significance\n\nwine.sig = cor.mtest(wine.cor, conf.level= .95)      #<< compute the p-values and confidence interval\n\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)\n\n\n\n\n\n\nReordering using hierarchical clustering\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",       #<< clustering method\n         addrect = 3)                    #<< 3 clusters defined"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#heatmaps-for-multivariate-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#heatmaps-for-multivariate-data",
    "title": "Hands On Exercise 05",
    "section": "Heatmaps for Multivariate Data",
    "text": "Heatmaps for Multivariate Data\n\nInstalling and Loading R Packages\n\npacman::p_load(seriation, dendextend, heatmaply, tidyverse)\n\n\n\nImporting Data\n\nwh <- read_csv(\"data/WHData-2018.csv\")\n\n\n\nData Preparation\n\nrow.names(wh) <- wh$Country                   #<< change the rows by country name instead of row number\n\nwh1 <- dplyr::select(wh, c(3, 7:12))          #<< select interested column values\n\nwh_matrix <- data.matrix(wh)                  #<< transform into matrix\n\n\n\nHeatmap() of R Stats\n\nwh_heatmap <- heatmap(wh_matrix,\n                      scale=\"column\",          #<< Scaling of values\n                      cexRow = 0.6,            #<< used to define the font size used for y-axis and x-axis labels \n                      cexCol = 0.8,\n                      margins = c(10, 4))      #<< ensure that the entire x-axis labels are displayed completely\n\n\n\n\n\n\nInteractive Heatmap using HeatMaply\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")                    #<< Scaling of values - when assumed normal distribution\n\n\n\n\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n#<< normalization is used when distribution is non-normal\n\n\n\nVisualizing Hierarchical Clustering\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")\n\n\n\n\n\n\n\nStatistical Approach to Hierarchical Clustering\nDetermining the best method\n\nwh_d <- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = \"euclidean\")\ndend_expend(wh_d)[[3]]               #<< used to determine the recommended clustering method to be used - USE THE METHOD WITH THE HIGHEST OPTIMUM VALUE\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6137851\n2      unknown        ward.D2 0.6289186\n3      unknown         single 0.4774362\n4      unknown       complete 0.6434009\n5      unknown        average 0.6701688\n6      unknown       mcquitty 0.5020102\n7      unknown         median 0.5901833\n8      unknown       centroid 0.6338734\n\n\nDetermining the optimal number of cluster\n\nwh_clust <- hclust(wh_d, method = \"average\")     #<< input based on best method\nnum_k <- find_k(wh_clust)\nplot(num_k)\n\n\n\n\nCluster based on Optimum Inputs\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3)\n\n\n\n\n\n\n\nOptimal Leaf Ordering (OLO) - Alt Method for Ordering Constraints due to HClustering\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"GW\")                     #<< seriate = OLO or GW\n\n\n\n\n\n\n\nWorking with Colour Palettes\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Blues,                         #<< heatmap colour themes\n          k_row = 5,                              #<< 5 clusters\n          margins = c(NA,200,60,NA),              #<< change the top margin to 60 and row margin to 200   \n          fontsize_row = 4,                       #<< change the font size for row and column labels\n          fontsize_col = 5,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\"\n          )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#parallel-coordinates-plots",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#parallel-coordinates-plots",
    "title": "Hands On Exercise 05",
    "section": "Parallel Coordinates Plots",
    "text": "Parallel Coordinates Plots\n\nInstalling and Loading R Packages\n\npacman::p_load(GGally, parallelPlot, tidyverse)\n\n\n\nImporting Data\n\nwh <- read_csv(\"data/WHData-2018.csv\")\n\n\n\nPlotting Static Parallel Coordinates Plot\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\")\n\n\n\n\n\n\nParallel Coordinates with Facet (+ Rotating x-axis label)\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) +                             #<< facet wrap by Region\n  theme(axis.text.x = element_text(angle = 30, hjust=1))      #<< Rotating x-axis label + adjust alignment\n\n\n\n\n\nPlotting Interactive Parallel Coordinates Plot\n\nwh <- wh %>%\n  select(\"Happiness score\", c(7:12))\nparallelPlot(wh,\n             width = 320,\n             height = 250)\n\n\n\n\n\nRotating Title to avoid overlapping axist labels\n\nparallelPlot(wh,\n             rotateTitle = TRUE)\n\n\n\n\n\nPlot Histogram overlay\n\nhistoVisibility <- rep(TRUE, ncol(wh))\nparallelPlot(wh,\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "title": "Hands On Exercise 06",
    "section": "",
    "text": "pacman::p_load(scales, viridis, lubridate, ggthemes, gridExtra, tidyverse, readxl, knitr, data.table)\n\n\n\n\nattacks <- read_csv(\"data/eventlog.csv\")\n\nkable(head(attacks)) #<< to review the structure of the imported data frame\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\n\n\n\n\n#<< writing a function to create weekday and hour fields for calendar heatmap\nmake_hr_wkday <- function(ts, sc, tz) {\n  real_times <- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt <- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n}\n\n#<< create day of the week values\nwkday_levels <- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\n#<< pass in data frame values into the make_hr_wkday function\nattacks <- attacks %>%\n  group_by(tz) %>%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %>% \n  ungroup() %>%            \n  mutate(wkday = factor(            #<< convert wkday and hour fields into a factor so that values will be ordered when plotting\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\n\n\n\n\ngrouped <- attacks %>%                            #<<derive count of attacks\n  count(wkday, hour) %>% \n  ungroup() %>%\n  na.omit()\n\nggplot(grouped,                                   #<< x=hour, y=weekday, fill gradient by counts\n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +                                    #<<make the grids into squares (equal sides)\nscale_fill_gradient(name = \"# of attacks\",         #<< customizing fill gradient (higher = darker)\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\n\n\n\n\n\n\n#<< Defining countries and % of total attacks\nattacks_by_country <- count(\n  attacks, source_country) %>%\n  mutate(percent = percent(n/sum(n))) %>%\n  arrange(desc(n))\n\n#<< Derive top 4 countries\ntop4 <- attacks_by_country$source_country[1:4]\n\n#<< Filter for Top 4 countries in main data set\ntop4_attacks <- attacks %>%\n  filter(source_country %in% top4) %>%\n  count(source_country, wkday, hour) %>%        #<< derive count of attacks\n  ungroup() %>%\n  mutate(source_country = factor(               #<< Convert source country into a factor so that values will be ordered\n    source_country, levels = top4)) %>%\n  na.omit()\n\n\n\n\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-cycle-plot",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-cycle-plot",
    "title": "Hands On Exercise 06",
    "section": "Plotting Cycle Plot",
    "text": "Plotting Cycle Plot\n\nImporting Data\n\nair <- read_excel(\"data/arrivals_by_air.xlsx\")\n\n\n\nData Preparation\n\n#<< create 2 new fields - MONTH / YEAR\nair$month <- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year <- year(ymd(air$`Month-Year`))\n\n\n#<< extract the target country\nVietnam <- air %>% \n  select(`Vietnam`, \n         month, \n         year) %>%\n  filter(year >= 2010)\n\n#<< derive average arrivals by month\nhline.data <- Vietnam %>% \n  group_by(month) %>%\n  summarise(avgvalue = mean(`Vietnam`))\n\n\n\nPlotting the Cycle Plot\n\nggplot() + \n  geom_line(data=Vietnam,                       #<<plot line chart from vietname dataset, grouped by month\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue),          #<<add average reference line from hline.data\n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-slopegraph",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-slopegraph",
    "title": "Hands On Exercise 06",
    "section": "Plotting Slopegraph",
    "text": "Plotting Slopegraph\n\nInstalling and Loading R Packages\n\npacman::p_load(CGPfunctions)\n\n\nImporting Data\n\nrice <- read_csv(\"data/rice.csv\")\n\nhead(rice)\n\n# A tibble: 6 × 4\n  Country  Year Yield Production\n  <chr>   <dbl> <dbl>      <dbl>\n1 China    1961 20787   56217601\n2 China    1962 23700   65675288\n3 China    1963 26833   76439280\n4 China    1964 28289   85853780\n5 China    1965 29667   90705630\n6 China    1966 31445   98403990\n\n\n\n\nPlotting the Slopegraph\n\nrice %>% \n  mutate(Year = factor(Year)) %>%                                 #<<convert YEAR from numeric into factor\n  filter(Year %in% c(1961, 1980)) %>%                             #<< filter only for START / END dates\n  newggslopegraph(Year, Yield, Country,                         \n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",\n                Caption = \"Prepared by: Dr. Kam Tin Seong\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-horizon-plot",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-horizon-plot",
    "title": "Hands On Exercise 06",
    "section": "Plotting Horizon Plot",
    "text": "Plotting Horizon Plot\n\nInstalling and Loading R Packages\n\npacman::p_load(ggHoriPlot)\n\n\n\nData Import\n\naverp <- read_csv(\"data/AVERP.csv\") %>% \n  mutate(`Date` = dmy(`Date`))           #<< by default, read_csv imports Date field as Character data type. need to parse the date field into appropriate data type\n\naverp\n\n# A tibble: 7,452 × 3\n   Date       `Consumer Items`               Values\n   <date>     <chr>                           <dbl>\n 1 2014-01-01 Wholemeal Bread (Per 400 Gram)   2.05\n 2 2014-02-01 Wholemeal Bread (Per 400 Gram)   2.05\n 3 2014-03-01 Wholemeal Bread (Per 400 Gram)   2.04\n 4 2014-04-01 Wholemeal Bread (Per 400 Gram)   2.04\n 5 2014-05-01 Wholemeal Bread (Per 400 Gram)   2.05\n 6 2014-06-01 Wholemeal Bread (Per 400 Gram)   2.05\n 7 2014-07-01 Wholemeal Bread (Per 400 Gram)   2.05\n 8 2014-08-01 Wholemeal Bread (Per 400 Gram)   2.05\n 9 2014-09-01 Wholemeal Bread (Per 400 Gram)   2.04\n10 2014-10-01 Wholemeal Bread (Per 400 Gram)   2.05\n# … with 7,442 more rows\n\n\n\n\nPlotting the Horizon Graph\n\naverp %>% \n  filter(Date >= \"2018-01-01\") %>%                          #<< filter for intended date range\n  ggplot() +\n  geom_horizon(aes(x = Date, y=Values), \n               origin = \"midpoint\", \n               horizonscale = 6) +                          #<< defining cut points of the horizon plot\n  facet_grid(`Consumer Items`~.) +                          #<< group by consumer items category\n    theme_few() +\n  scale_fill_hcl(palette = 'RdBu') +\n  theme(panel.spacing.y=unit(0, \"lines\"), strip.text.y = element_text(\n    size = 5, angle = 0, hjust = 0),\n    legend.position = 'none',\n    axis.text.y = element_blank(),\n    axis.text.x = element_text(size=7),\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    panel.border = element_blank()\n    ) +\n    scale_x_date(expand=c(0,0), date_breaks = \"3 month\", date_labels = \"%b%y\") + #<< tick marks to display in 3M intervals\n  ggtitle('Average Retail Prices of Selected Consumer Items (Jan 2018 to Dec 2022)')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html",
    "title": "Hands On Exercise 06",
    "section": "",
    "text": "pacman::p_load(sf, tmap, tidyverse)\n\n\n\n\nsgpools <- read_csv(\"data/aspatial/SGPools_svy21.csv\")\n\nlist(sgpools) \n\n[[1]]\n# A tibble: 306 × 7\n   NAME                            ADDRESS POSTC…¹ XCOORD YCOORD OUTLE…² Gp1Gp…³\n   <chr>                           <chr>     <dbl>  <dbl>  <dbl> <chr>     <dbl>\n 1 Livewire (Marina Bay Sands)     2 Bayf…   18972 30842. 29599. Branch        5\n 2 Livewire (Resorts World Sentos… 26 Sen…   98138 26704. 26526. Branch       11\n 3 SportsBuzz (Kranji)             Lotus …  738078 20118. 44888. Branch        0\n 4 SportsBuzz (PoMo)               1 Sele…  188306 29777. 31382. Branch       44\n 5 Prime Serangoon North           Blk 54…  552542 32239. 39519. Branch        0\n 6 Singapore Pools Woodlands Cent… 1A Woo…  731001 21012. 46987. Branch        3\n 7 Singapore Pools 64 Circuit Rd … Blk 64…  370064 33990. 34356. Branch       17\n 8 Singapore Pools 88 Circuit Rd … Blk 88…  370088 33847. 33976. Branch       16\n 9 Singapore Pools Anchorvale Rd … Blk 30…  540308 33910. 41275. Branch       21\n10 Singapore Pools Ang Mo Kio N2 … Blk 20…  560202 29246. 38943. Branch       25\n# … with 296 more rows, and abbreviated variable names ¹​POSTCODE,\n#   ²​`OUTLET TYPE`, ³​`Gp1Gp2 Winnings`\n\n\n\n\n\n\nsgpools_sf <- st_as_sf(sgpools, \n                       coords = c(\"XCOORD\", \"YCOORD\"),    #<< this combines the x (long) and y (lat) coordinate fields\n                       crs= 3414)                         #<< CRS - projection code that a country uses (SVY21)\n\nlist(sgpools_sf)\n\n[[1]]\nSimple feature collection with 306 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 7844.194 ymin: 26525.7 xmax: 45176.57 ymax: 47987.13\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 306 × 6\n   NAME                ADDRESS POSTC…¹ OUTLE…² Gp1Gp…³            geometry\n * <chr>               <chr>     <dbl> <chr>     <dbl>         <POINT [m]>\n 1 Livewire (Marina B… 2 Bayf…   18972 Branch        5 (30841.56 29598.56)\n 2 Livewire (Resorts … 26 Sen…   98138 Branch       11  (26703.87 26525.7)\n 3 SportsBuzz (Kranji) Lotus …  738078 Branch        0 (20117.93 44888.06)\n 4 SportsBuzz (PoMo)   1 Sele…  188306 Branch       44 (29776.95 31382.18)\n 5 Prime Serangoon No… Blk 54…  552542 Branch        0 (32238.69 39518.76)\n 6 Singapore Pools Wo… 1A Woo…  731001 Branch        3 (21012.15 46987.32)\n 7 Singapore Pools 64… Blk 64…  370064 Branch       17 (33990.39 34355.53)\n 8 Singapore Pools 88… Blk 88…  370088 Branch       16 (33847.38 33976.04)\n 9 Singapore Pools An… Blk 30…  540308 Branch       21 (33909.93 41274.52)\n10 Singapore Pools An… Blk 20…  560202 Branch       25  (29246.06 38942.6)\n# … with 296 more rows, and abbreviated variable names ¹​POSTCODE,\n#   ²​`OUTLET TYPE`, ³​`Gp1Gp2 Winnings`\n\n\n\n\n\nSingle Map\n\ntmap_mode(\"view\") #<< \"plot\" = static plot of the map (no tooltip)\n\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"OUTLET TYPE\",          #<< split colour by outlet type\n          size = \"Gp1Gp2 Winnings\",      #<< shape size by winnings\n          border.col = \"black\",          #<< shape border\n          border.lwd = 1)\n\n\n\n\n\n\nDouble Map\n\ntm_shape(sgpools_sf) +\n  tm_bubbles(col = \"OUTLET TYPE\", \n          size = \"Gp1Gp2 Winnings\",\n          border.col = \"black\",\n          border.lwd = 1) +\n  tm_facets(by= \"OUTLET TYPE\",           #<< facetting by outlet type\n            nrow = 1,\n            sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#choropleth-mapping",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#choropleth-mapping",
    "title": "Hands On Exercise 06",
    "section": "Choropleth Mapping",
    "text": "Choropleth Mapping\n\nInstalling and Loading R Packages\n\npacman::p_load(sf, tmap, tidyverse)\n\n\nImporting Data\n\nmpsz <- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\cheryljeanne\\ISSS608-VAA\\Hands-on_Ex\\Hands-on_Ex07\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\npopdata <- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\n\n\nData Preparation\n\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%                    #<< only use 2020 data\n  group_by(PA, SZ, AG) %>%                    #<< group by PA, SZ, AG\n  summarise(`POP` = sum(`Pop`)) %>%           #<< sum Pop\n  ungroup()%>%\n  pivot_wider(names_from=AG,                  #<< change to wide data format - AG into columns\n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])              #<< create new columns, sum rows by index\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+ \nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %>%          #<< function converts all values to upper case\n  filter(`ECONOMY ACTIVE` > 0)\n\n#<< left side needs to be spatial data, else geometric map will be dropped- left join data with mapping coordinates\nmpsz_pop2020 <- left_join(mpsz, popdata2020,            \n                          by = c(\"SUBZONE_N\" = \"SZ\")) #<< sequence of field join has to follow the table sequence\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")\n\n\n\nPlotting\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "title": "In Class Exercise 3",
    "section": "",
    "text": "Installing and Loading R Packages\nTwo packages will be installed and loaded. They are: tidyverse and ggiraph\n\npacman::p_load(ggiraph, tidyverse) \n\n\n\nImporting Data\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\n\n\nExploring Interactive Tooltip Effect\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\nDisplaying Multiple Information on Tooltip\n\nexam_data$tooltip <- c(paste0(     #<<\n  \"Name = \", exam_data$ID,         #<<\n  \"\\n Class = \", exam_data$CLASS)) #<<\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), #<<\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\n\n\nCustomizing / Formatting Tooltip Styles\n\ntooltip_css <- \"background-color:white; #<<\nfont-style:bold; color:black;\" #<<\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #<<\n    opts_tooltip(    #<<\n      css = tooltip_css)) #<<\n)                                        \n\n\n\n\n\n\n\nDisplaying statistics on tooltip\n\ntooltip <- function(y, ymax, accuracy = .01) {   #<<\n  mean <- scales::number(y, accuracy = accuracy) #<<\n  sem <- scales::number(ymax - y, accuracy = accuracy) #<<\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem) #<<\n} #<<\n\ngg_point <- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  #<<\n                     tooltip(y, ymax))),  #<<\n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  #<<\n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\nHover Effect - Using another attribute as an aesthetic\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        #<<\n    opts_hover(css = \"fill: #202020;\"),  #<<\n    opts_hover_inv(css = \"opacity:0.2;\") #<<\n  )                                      #<<  \n)                                                                              \n\n\n\n\n\n\n\nCombining tooltip and hover effect\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, #<<\n        data_id = CLASS),#<<              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\n\nAction Buttons: Click effect with onclick (Hyperlink)\n\nexam_data$onclick <- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              #<<\n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n\n\n\n\n\n\nCoordinated Views between 2 plots #QUESTION ON PLOT SIZE\n\np1 <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + #<<\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 <- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + #<<\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\n#girafe(code = print(p1 / p2), #<<\n#       width_svg = 8,\n#       height_svg = 8\n#        )\n\n\n\nInteractive Data Table\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\nInteractive Data Table with Plot\n\npacman::p_load(plotly) #<< Package Load\n\nd <- highlight_key(exam_data) \np <- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg <- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnimated Plots\n\npacman::p_load(readxl, gganimate, gifski, gapminder) #<< Package Load\n\n###<< Data Import / Data Conversion\n\ncol <- c(\"Country\", \"Continent\")\nglobalPop <- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %>%\n  mutate_each_(funs(factor(.)), col) %>%\n  mutate(Year = as.integer(Year))\n\n###<< Build Animated Bubble Plot\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       #<<\n  ease_aes('linear')            #<<\n\n\n\n\n\n\nVisualizing Large Datasets #How does the Packed Bar Method WOrk?\n\npacman::p_load(readr, rPackedBar) #<< Package Load\n\n#<< Import Data\nGDP <- read_csv(\"data/GDP.csv\")\nWorldCountry <- read_csv(\"data/WorldCountry.csv\")\n\n#<< Data Prep\nGDP_selected <- GDP %>%\n  mutate(Values = as.numeric(`2020`)) %>%\n  select(1:3, Values) %>%\n  pivot_wider(names_from = `Series Name`,\n              values_from = `Values`) %>%\n  left_join(y=WorldCountry, by = c(\"Country Code\" = \"ISO-alpha3 Code\"))\n\nGDP_selected <- GDP %>%\n  mutate(GDP = as.numeric(`2020`)) %>%\n  filter(`Series Name` == \"GDP (current US$)\") %>%\n  select(1:2, GDP) %>%\n  na.omit()\n\np = plotly_packed_bar(\n  input_data = GDP_selected,\n  label_column = \"Country Name\",\n  value_column = \"GDP\",\n  number_rows = 10,\n  plot_title = \"Top 10 countries by GDP, 2020\",\n  xaxis_label = \"GDP (US$)\",\n  hover_label = \"GDP\",\n  min_label_width = 0.018,\n  color_bar_color = \"#00aced\",\n  label_color = \"white\")\nplotly::config(p, displayModeBar = FALSE)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "title": "In Class Exercise 4",
    "section": "",
    "text": "pacman::p_load(plotly, DT, tidyverse, patchwork, ggstatsplot, tidyverse) \n\n\n\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\nplot_ly(data = exam_data,\n        x = ~ENGLISH,\n        y = ~MATHS,\n        color = ~RACE) #<<\n\n\n\n\n\n\n\n\n\np <- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(dotsize = 1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p) #<<\n\n\n\n\n\n\n\n\n\nset.seed(1234)\n\ngghistostats(\n  data = exam_data,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nggbetweenstats(\n  data = exam_data,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\nggbetweenstats(\n  data = exam_data,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\nggscatterstats(\n  data = exam_data,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = TRUE, #<<\n  )\n\n\n\n\n\n\n\nInstalling and Loading R Packages\n\npacman::p_load(readxl, performance, parameters, see)\n\nImporting Data\n\ncar_resale <- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\") #<< need to specify tab as file has 2 tabs\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model       Price Age_0…¹ Mfg_M…² Mfg_Y…³     KM Quart…⁴ Weight Guara…⁵\n   <dbl> <chr>       <dbl>   <dbl>   <dbl>   <dbl>  <dbl>   <dbl>  <dbl>   <dbl>\n 1    81 TOYOTA Cor… 18950      25       8    2002  20019     100   1180       3\n 2     1 TOYOTA Cor… 13500      23      10    2002  46986     210   1165       3\n 3     2 TOYOTA Cor… 13750      23      10    2002  72937     210   1165       3\n 4     3  TOYOTA Co… 13950      24       9    2002  41711     210   1165       3\n 5     4 TOYOTA Cor… 14950      26       7    2002  48000     210   1165       3\n 6     5 TOYOTA Cor… 13750      30       3    2002  38500     210   1170       3\n 7     6 TOYOTA Cor… 12950      32       1    2002  61000     210   1170       3\n 8     7  TOYOTA Co… 16900      27       6    2002  94612     210   1245       3\n 9     8 TOYOTA Cor… 18600      30       3    2002  75889     210   1245       3\n10    44 TOYOTA Cor… 16950      27       6    2002 110404     234   1255       3\n# … with 1,426 more rows, 28 more variables: HP_Bin <chr>, CC_bin <chr>,\n#   Doors <dbl>, Gears <dbl>, Cylinders <dbl>, Fuel_Type <chr>, Color <chr>,\n#   Met_Color <dbl>, Automatic <dbl>, Mfr_Guarantee <dbl>,\n#   BOVAG_Guarantee <dbl>, ABS <dbl>, Airbag_1 <dbl>, Airbag_2 <dbl>,\n#   Airco <dbl>, Automatic_airco <dbl>, Boardcomputer <dbl>, CD_Player <dbl>,\n#   Central_Lock <dbl>, Powered_Windows <dbl>, Power_Steering <dbl>,\n#   Radio <dbl>, Mistlamps <dbl>, Sport_Model <dbl>, Backseat_Divider <dbl>, …\n\n\n\nmodel <- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel #<<GTSUMMARY package - to convert output to data frame (tbl_regression)\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\nCheck for multicollinearity\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Guarantee_Period  1.04   [1.01, 1.17]         1.02      0.97     [0.86, 0.99]\n        Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n         Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\nHigh Correlation\n\n   Term  VIF   VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n     KM 1.46 [1.37, 1.57]         1.21      0.68     [0.64, 0.73]\n Weight 1.41 [1.32, 1.51]         1.19      0.71     [0.66, 0.76]\n\n\nPlot multicollinearity\n\ncheck_c <- check_collinearity(model)\n\nplot(check_c)\n\n\n\n\nCheck for normality\n\nmodel1 <- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale) #<< Drop attribute with high collinearity\n\ncheck_n <- check_normality(model1)\n\ncheck_n\n\nWarning: Non-normality of residuals detected (p < .001).\n\nplot(check_n)\n\n\n\n\nCheck for homogeneity\n\ncheck_h <- check_heteroscedasticity(model1)\n\nplot(check_h)\n\n\n\n\nCheck for Everything\n\ncheck_model(model1)\n\n\n\n\n\n\n\n\nplot(parameters(model1))\n\n\n\n\n\nggcoefstats(model1, \n            output = \"plot\") \n\n\n\n\n\n\n\nInstalling and Loading R Packages\n\npacman::p_load(tidyverse, plotly, crosstalk, DT, ggdist, gganimate)\n\nImporting Data\n\nexam <- read_csv(\"data/Exam_data.csv\")\n\nFormatting Statistical Data (Data Prep)\n\nmy_sum <- exam %>%\n  group_by(RACE) %>%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %>%\n  mutate(se=sd/sqrt(n-1))\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n \n  \n    RACE \n    n \n    mean \n    sd \n    se \n  \n \n\n  \n    Chinese \n    193 \n    76.50777 \n    15.69040 \n    1.132357 \n  \n  \n    Indian \n    12 \n    60.66667 \n    23.35237 \n    7.041005 \n  \n  \n    Malay \n    108 \n    57.44444 \n    21.13478 \n    2.043177 \n  \n  \n    Others \n    9 \n    69.66667 \n    10.72381 \n    3.791438 \n  \n\n\n\n\n\nVisualizing using GGPlot\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean \n          maths score by rac\")\n\n\n\n\nVisualizing using GGDist\n\nexam %>%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to ISSS608 - Visual Analytics and Applications homepage. In this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "This take-home exercise uses data sourced from Department of Statistics, Singapore which contains data on Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling in June 2022. Through the use of the age-sex pyramid method, this visualisation seeks to reveal insights on the demographic structure of Singapore at the planning area level.\nThe final analytical visualisation output has been published on Tableau Public."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#populous-estates",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#populous-estates",
    "title": "Take-home Exercise 1",
    "section": "Populous Estates",
    "text": "Populous Estates\nThe age-sex pyramid is able to visually depict which planning areas are the most populous estates at the total population level. Organising this into a Trellis plot enables further contrasting between the selected planning areas, with the length of the bars depicting Bedok (279k), Sengkang (253k) and Hougang (228k) as estates with the highest population, while Bukit Timah (79k) and Queenstown (97k) are less densely populated."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#ageing-population-vs-younger-population",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#ageing-population-vs-younger-population",
    "title": "Take-home Exercise 1",
    "section": "Ageing Population vs Younger Population",
    "text": "Ageing Population vs Younger Population\nThe age-sex pyramid is also able to derive insights on the age composition within a given planning area. For instance, comparing the range where the bar chart peaks between Punggol and Queenstown, it is evident that residents in Punggol mostly belong to the younger age group, while residents in Queenstown are generally older in age."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#family-with-kids-vs-families-with-no-kids",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#family-with-kids-vs-families-with-no-kids",
    "title": "Take-home Exercise 1",
    "section": "Family with kids vs Families with no kids",
    "text": "Family with kids vs Families with no kids\nThe distribution of the bar chart allows us to infer the age range of family nucleuses within the planning areas. For example, the charts displayed below exhibits a bimodal distribution.\nThe first peak is symmetrical between both genders and can be indicative of the age range of parents. The age range of parents that resides in Punggol and Sengkang are broadly similar (i.e., 30 to 45 years old), while parents in Pasir Ris are older (i.e., 50+ years old).\nThe sequence of the next peak in the chart is broadly consistent across all 3 charts, wherein the age difference between the 2 peaks is around +/- 30 years - suggestive that the second peak is the children of parents (i.e., less than 10 years old). This pattern allows us to differentiate the mature estates like Pasir Ris, where the age range of parents and their children are older, against the newer estates like Sengkang and Punggol, where parents and their children are younger in age.\n\n\n\n\n\nIn contrast, the distribution of residents in Queenstown does not exhibit an obvious peak, with a somewhat moderate bell-shaped distribution. This implies that in comparison to other estates, residents residing in Queenstown are more likely to have no kids."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#gender-imbalances",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#gender-imbalances",
    "title": "Take-home Exercise 1",
    "section": "Gender imbalances",
    "text": "Gender imbalances\nThe age-sex pyramid allows us to visually contrast and pick out non-symmetrical patterns relating to gender imbalances. This is particularly noticeable in the older age groups. For instance, in the older estates such as Ang Mo Kio, Bedok and Queenstown, there is a greater contrasting effect between females and males. This is consistent with the general understanding that females have a longer lifespan than males."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#loading-of-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#loading-of-data",
    "title": "Take-home Exercise 1",
    "section": "Loading of Data",
    "text": "Loading of Data\nLoad the data based on dataset respopagesextod2022.csv downloaded from SingStat in Tableau and rename the dataset to “SG Residents Data (June 2022)” for clarity."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#setting-up-the-bar-chart",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#setting-up-the-bar-chart",
    "title": "Take-home Exercise 1",
    "section": "Setting Up the Bar Chart",
    "text": "Setting Up the Bar Chart\n\nClick on the new worksheet tab. From Dimensions, drag AG to the Rows shelf. This will define the Y-axis of the bar chart.\n\n\n\n\n\n\n\nRight click on the AG field under the Rows shelf, click on Edit Aliases and update the Alias values to a more readable format.\n\n\n\n\n\n\n\nRight click on the AG field under the Rows shelf and select Sort descending.\n\n\n\n\n\n\n\nCreate a calculated field labelled ‘Female Population’ that returns the Population value if the gender is female.\n\n\n\n\n\n\n\nFrom Measures, drag the newly created Female Population calculated field to the Columns shelf to create a bar chart that represents the female population. From the Marks card for Female Population, click on Colour and change the color of the bars to pink.\n\n\n\n\n\n\n\nCreate a calculated field labelled ‘Male Population’ that returns the Population value if the gender is male.\n\n\n\n\n\n\n\nFrom Measures, drag the newly created Male Population calculated field to the Columns shelf to create a bar chart that represents the male population. From the Marks card for Male Population, click on Colour and change the color of the bars to blue.\n\n\n\n\n\n\n\nRight-click on the X-axis for the Female Population, and select Edit Axis. Under Scale, select Reversed."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#creating-the-trellis-chart-display",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#creating-the-trellis-chart-display",
    "title": "Take-home Exercise 1",
    "section": "Creating the Trellis Chart Display",
    "text": "Creating the Trellis Chart Display\n\n9 Planning Areas have been selected for the purpose of this exercise. Create 2 new calculated fields to index the Planning Area by columns and rows. The expected output should be reflected in this order:\n\n\n\n\nRow / Col #\n1\n2\n3\n\n\n\n\n1\nAng Mo Kio\nBedok\nBukit Timah\n\n\n2\nChoa Chu Kang\nHougang\nPasir Ris\n\n\n3\nPunggol\nQueenstown\nSeng Kang\n\n\n\n \n\nDrag the newly created Columns and Rows calculated fields to the first field of the respective Columns / Rows shelf. This will index the charts as defined in the calculated fields.\n\n\n\n\n\n\n\nFilter out uninterested Planning Area entries by adding the Rows and Columns fields to the Filters shelf. Exclude all null values to filter of Planning Areas which have not previously been defined in the Rows / Columns calculated fields.\n\n \n\nRight click on the Columns values and uncheck Show Header to remove the Column header values. Do the same for the Row header values as well.\n\n\n\n\n\n\n\n\n\n\n\n\nRight click on the AG row header and select Hide Field Labels for Rows to remove the AG field header display.\n\n\n\n\n\n\n\nDrag the PA field into the Label for Male Marks card. Click on Label, under Marks to Label, ensure that the parameters as displayed in the screenshot have been set. Manually drag the labels to the top right hand corner of each of the 9 bar charts.\n\n\n\n\n\n\n\n\n\n\n\n\nDrag the Sex field into the Color for All Marks card. Click on Colors button and select Edit Colors to select the desired colours. Rename and reformat the Sex field to Gender.\n\n \n\nCreate a FIXED level of detail (LOD) calculated field called Sum Pop to fix the calculation of sum(Pop) by PA. This will enable the field to fix the total population sum by planning areas for the purpose of the tooltip display.\n\n\n\n\n\n\n\nTo set the tooltip display, under the All population marks card, drag Sum Pop into Tooltip and set the formatting parameters as displayed in the screenshot below. Under the Female Population Marks card, drag PA and Female into Tooltip and set the formatting parameters as displayed in the screenshot below. Do the same for Male Population as well."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#creating-the-dashboard",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#creating-the-dashboard",
    "title": "Take-home Exercise 1",
    "section": "Creating the Dashboard",
    "text": "Creating the Dashboard\n\nClick on the new dashboard tab. Under size, select Automatic.\n\n\n\n\n\n\n\nDrag the created worksheet to the dashboard space. Using the Text object, ensure that the Tiled format is selected before dragging the object to the top-most layer of the dashboard. Input the dashboard title header and format the text size, font and colour accordingly. \n\n\n\n\n\n\n\nDrag and drop the image object to the top-right corner of the dashboard. The image should be saved on your desktop before specifying the path to upload the image to. Check Fit image.\n\n \n\nSelect the Gender container and drop to the top-right corner of the dashboard.\n\n\n\n\n\n\n\nResize the respective Containers where relevant to produce the final output."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "Take-home Exercise 2 is done by selecting a Take-home Exercise 1 submission prepared by a fellow classmate. The peer submission will be critiqued in terms of clarity and aesthetics. I will also remake the original design by proposing an alternative design using the data visualization principles and best practices learnt in Lesson 1 and 2\n\n                   \n\n\n\nGrouping the age groups into buckets within a +/- 15 to 20 year range (e.g., young dependents, young work group, prime work group, etc.) results in loss of important details on the distribution shape. This also goes against the essence of the age sex pyramid, which is intended to graphically represent the distribution of a population by age and sex.\nThe age-sex pyramid is also intended to be depicted in the form of a pyramid, where the age group should be sorted in descending order (i.e., oldest age group on top). Inverting the age group order may not be intuitive for users if they see the apex starting from the bottom.\nTransforming the values into percentages without displaying the absolute population numbers makes the chart confusing and misleading as users are not able to compare the population differences between the planning areas. In the selected chart, population sizes across all planning look visually similar, which is not really the case in numerical terms.\nThe title is labelled as “Proportion of Females and Males by Age Groups for 9 most populous Planning Areas in the Central Area - June 2022”. This may be misleading for users as the definition, scope and methodology of how the 9 Central Areas were selected, or what is defined as a “Central Area” lacks clarity.\n\n\n\n\n\nThe colours chosen for the chart was mildly confusing as it does not show the separation between Males and Females.\nThe percentage labels that were included at the end of the bars make the chart appear quite cluttered; additional supplementary details should be included in the tooltip instead, as the main focus of the display should be in the distribution.\nGood display of data source credits.\nFonts selected were easy to read, with clear labeling of Planning Areas"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#proposed-design",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#proposed-design",
    "title": "Take-home Exercise 2",
    "section": "2.1. Proposed Design",
    "text": "2.1. Proposed Design\nThis proposed design of the visualization remake is intended to retain ideas from the original visualization, whilst incorporating best practices to showcase interesting insights from the population areas.\n\nDynamic filter has been added to filter for the top 9 most populous planning areas instead.\nAge Group has been cleaned and original grouping has been retained to preserve the population distribution granularity as much as possible.\nLabels have been removed to avoid unnecessary clutter.\nPreserved and enhanced clear labeling of the Planning Area plot labels.\nAdded Colour coding and legends to clearly indicate the distribution segregation between females and males.\nThe population scale axis (x-axis) has been rounded to per thousands instead. The actual population number has also been set up to display as a tooltip on hover instead. This would reduce the numeric clutter in the chart, whilst preserving important information for the user.\nThe data source credit has been retained."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#remake-of-original-visualization-using-r",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#remake-of-original-visualization-using-r",
    "title": "Take-home Exercise 2",
    "section": "2.2. Remake of Original Visualization using R",
    "text": "2.2. Remake of Original Visualization using R\n\nInstalling and launching R packages\n\npacman::p_load(tidyverse, dplyr, ggplot2, ggthemes, ggiraph) \n\n\n\nImporting the data\n\nrespop_data <- read_csv(\"data/respopagesextod2022.csv\")\n\n\n\nPreparing the data\n\nCleaning of Age Group Values\nRefer to annotations made within the code for specific description\n\nrespop_data <- respop_data %>%\n  mutate(AG = case_when(\n    AG %in% \"90_and_over\" ~ \"90 and over\",\n    AG %in% \"85_to_89\" ~ \"85 - 89\",\n    AG %in% \"80_to_84\" ~ \"80 - 84\",\n    AG %in% \"75_to_79\" ~ \"75 - 79\",\n    AG %in% \"70_to_74\" ~ \"70 - 74\",\n    AG %in% \"65_to_69\" ~ \"65 - 69\",\n    AG %in% \"60_to_64\" ~ \"60 - 64\",\n    AG %in% \"55_to_59\" ~ \"55 - 59\",\n    AG %in% \"50_to_54\" ~ \"50 - 54\",\n    AG %in% \"45_to_49\" ~ \"45 - 49\",\n    AG %in% \"40_to_44\" ~ \"40 - 44\",\n    AG %in% \"35_to_39\" ~ \"35 - 39\",\n    AG %in% \"30_to_34\" ~ \"30 - 34\",\n    AG %in% \"25_to_29\" ~ \"25 - 29\",\n    AG %in% \"20_to_24\" ~ \"20 - 24\",\n    AG %in% \"15_to_19\" ~ \"15 - 19\",\n    AG %in% \"10_to_14\" ~ \"10 - 14\",\n    #<< Labelling single digits to start with '0' preserves the sorting integrity without requiring a separate code to specifically sort the age groups\n    AG %in% \"5_to_9\" ~ \"05 - 09\",   \n    AG %in% \"0_to_4\" ~ \"00 - 04\"))\n\n\n\nDeriving Top 9 Planning Areas by Population\nRefer to annotations made within the code for specific description\n\n#<< Derive Top 9 highest Pop by PA\ntop9pa <- respop_data %>%\n  select(PA, Pop) %>%               #<< Select PA and Pop columns\n  group_by(PA)  %>%                 #<< Group by PA, sum Pop into sum_Pop column\n  summarise(sum_Pop=sum(Pop),\n            .groups = 'drop') %>%\n  arrange(desc(sum_Pop)) %>%        #<< Sort PA by sum_Pop in descending order\n  slice(0:9)                        #<< Only retain top 9 PA\n\n#<< Inner join back to main dataset to get full data only for the Top 9 PA\nrespop_filtered <- inner_join(respop_data, \n                              top9pa,\n                              by = c(\"PA\" = \"PA\"))\n\n#<< Aggregate Top 9 Population by PA, AG, Sex\ndd <- respop_filtered %>%\n  select(PA, AG, Sex, Pop) %>%              \n  group_by(PA, AG, Sex)  %>%                \n  summarise(sum_Pop=sum(Pop),\n            .groups = 'drop')\n\n\n\n\nCreating Age-Sex Pyramid\nRefer to annotations made within the code for specific description\n\np <- ggplot(data = dd, aes(x = AG, fill = Sex)) +\n      #<< First Bar Interactive Chart to filter for data where Sex = Males, display y-axis by population in thousands, display Population # in tooltip\n      geom_col_interactive(data = subset(dd, Sex == \"Males\"), aes(y = sum_Pop/1000, tooltip = sum_Pop)) + \n      #<< Second Bar Chart to filter for data where Sex = Females, display y-axis by population in thousands. *-1 inverts the axis, display Population # in tooltip\n      geom_col_interactive(data = subset(dd, Sex == \"Females\"), aes(y=sum_Pop/1000 * (-1), tooltip = sum_Pop) ) +\n      #<< Flip the coordinates so that AG is at the Y-axis\n      coord_flip() +  \n      #<< Split chart by PA, with 3 rows - there are 9 PAs, so this will appear as a 3x3\n      facet_wrap(~ PA, , nrow=3) +\n      #<< Convert initial y-axis labels (i.e., Pop) into absolute terms to remove the '-' sign\n      scale_y_continuous(labels = abs) +\n      #<< Apply economist theme - white background for simplicity, horizontal gridlines only for easy trace-ability to AG axis marks\n      theme_economist_white(gray_bg=FALSE) + scale_color_economist() +\n      #<< Formatting of axis fonts, axis ticks, axis lines\n      #<< Further expanding line margins to reduce clutter of title / subtitle positioning\n      theme(axis.text = element_text(colour = \"gray60\", size = 8),\n            axis.ticks.x = element_line(colour = \"gray60\"),\n            axis.line.x = element_blank(),\n            plot.title = element_text(size = 20, face = \"bold\",hjust = 0.5),\n            axis.title.x = element_text(margin = margin(t = 10), colour = \"gray60\"),\n            axis.title.y = element_text(margin = margin(r = 10), colour = \"gray60\"),\n            plot.subtitle = element_text(margin=margin(5,0,5,0))\n            ) +\n      #<< add Header title, Axis titles, sub titles\n      ggtitle(\"Distribution of Sex by Age Group for 9 most populous areas - June 2022\") +\n      labs(y = \"Population (per'000) \", x = \"Age Group\", size = 15) + \n      labs(subtitle = \"Data Source: Department of Statistics, Singapore\")\n\n#<< run interactive ggirafe\ngirafe(\n  ggobj = p,\n  width_svg = 10,\n  height_svg = 10\n)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "Take-home Exercise 3 will seek to uncover the salient patterns of the resale prices of public housing property by residential towns and estates in Singapore by using appropriate analytical visualisation techniques learned in Lesson 4: Fundamentals of Visual Analytics. The dataset selected for this exercise is sourced from Data.gov.sg and contains data on the Resale Flat Prices based on Registration Date from Jan 2017 onwards.\nFor the purpose of this study, only 3-ROOM, 4-ROOM and 5-ROOM flat types will be used for analysis. The study period is conducted based on transactions recorded in 2022."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#analytical-visualization-1---box-violin-plot",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#analytical-visualization-1---box-violin-plot",
    "title": "Take Home Exercise 3",
    "section": "Analytical Visualization #1 - Box Violin Plot",
    "text": "Analytical Visualization #1 - Box Violin Plot\n\nSelection and Design Considerations\nThis visualization uses the ggbetweenstats() method in the ggstatsplot package to conduct a One-way ANOVA test on Resale Prices by Flat Type.\n• A combination of box and violin plots along with jittered data points for between-flat type designs is used – side-by-side display of plots is able to give the user an immediate visual comparison of the differences in resale prices across flat types.\n• Statistical details included in the plot as a subtitle gives the user quantitative validation of the One-way ANOVA test outcomes.\n• Y-axis Resale prices has been rounded to thousands to facilitate the user’s ease of reading.\n• Outlier label is turned on to identify the towns where outlier prices have been recorded.\n\n\nReproducible Description Data Viz Prep\nThe code chunk below contains the codes required to reproduce this visualization, along with the corresponding annotations which describes the procedures used.\n\nset.seed(123)\n\nresale_filtered1 <- resale_filtered %>% \n  select(resale_price, town, flat_type) %>%\n  mutate(resale_price = resale_price/1000)\n\nggbetweenstats(\n  data                 = resale_filtered1,                                              #<< dataframe\n  x                    = flat_type,                                                     #<< grouping / independent variable\n  y                    = resale_price,                                                  #<< dependent variables\n  xlab                 = \"Resale Price (in S$'000)\",                                    #<< label for the x-axis\n  ylab                 = \"Flat Type\",                                                   #<< label for the y-axis\n  title                = \"Comparison of Resale Price (in S$'000) by Flat Type (2022)\",  #<< Plot Title\n  caption              = \"Source: Data.gov.sg\",                                         #<< Caption\n  type                 = \"p\",                                                           #<< type of statistical test: parametric\n  mean.plotting        = TRUE,                                                          #<< whether the mean is to be displayed\n  outlier.tagging      = TRUE,                                                          #<< whether outliers should be flagged\n  outlier.coef         = 3,                                                             #<< outlier coeff - configured to display extreme outliers\n  outlier.label        = town,                                                          #<< label to attach to outlier values\n  outlier.label.color  = \"red\",                                                         #<< outlier point label color\n  messages             = FALSE                                                          #<< turn off messages\n) \n\n\n\n\n\n\nInsights Revealed by Data Viz\nResale prices are currently over-valued across all flat types.\nFrom the plot, we are able to see that the distribution is positively skewed across all 3 flat types, where the mean > median. This means that the data constitutes a higher frequency of high valued resale transaction prices.\n4-Room and 5-Room Flats are more over-valued\nThe mean, identified by the red dot in the plot, appears to be further away for 4-Room and 5-Room flats vs 3-Room flat, which implies the higher price premium imposed on the demand for bigger houses.\nResale prices across flat types is statistically different\nGiven that the p-value is smaller than the alpha level, the null hypothesis is rejected and we can statistically validate that there are indeed differences in the resale prices across flat types.\nPricing in of location premium\nLooking that the extreme outlier labels displayed in the plot, we can also see how the location premium effect is priced into the resale transaction prices. For example, a 4 Room HDB flat in the central area can cost more than most 5 Room HDB flats."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#analytical-visualization-2---dot-plot",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#analytical-visualization-2---dot-plot",
    "title": "Take Home Exercise 3",
    "section": "Analytical Visualization #2 - Dot Plot",
    "text": "Analytical Visualization #2 - Dot Plot\n\nSelection and Design Considerations\nThis visualization uses the ggdotplotstats() method in the ggstatsplot package to conduct a Bootstrap-t method for one-sample test. The output is visualized in a dot plot using the Cleveland dot plot.\n• Displaying in a dot plot makes the labels easier to read, as the towns are sorted in percentile terms, thereby reducing graph clutter.\n• The mean labels are clearly defined, allowing the user a basis to easily identify overvalued/undervalued towns relative to the mean.\n• Plots displayed side-by-side allows the user a visual comparison of the transacted prices relative to the transaction count across towns.\n• Statistical details included in the plot as a subtitle gives the user quantitative validation of the one-sample test outcomes.\n\n\nReproducible Description Data Viz Prep\nThe code chunk below contains the codes required to reproduce this visualization, along with the corresponding annotations which describes the procedures used.\n\n#<< selecting relevant fields for plot and rounding resale price to thousands\nresale_filtered2 <- resale_filtered %>% \n  select(resale_price, town, flat_type, No_of_txn) %>% \n  mutate(resale_price = resale_price/1000) %>% \n  distinct()\n\n#<< derive average txn prices and txn count by towns\nresale_filtered3 <- resale_filtered %>%\n  select(resale_price, town, flat_type, No_of_txn) %>%             \n  group_by(town)  %>%                \n  summarise(avg_Px=mean(resale_price),\n            avg_Txn_Count=mean(No_of_txn),\n            .groups = 'drop')  %>%\n  mutate(avg_Px = avg_Px/1000) \n\n\nset.seed(123)\n\np1 <- ggdotplotstats(\n            data         = resale_filtered2,                                              #<< transformed dataset\n            y            = town,                                                          #<< selecting y-axis (i.e., town)\n            x            = resale_price,                                                  #<< selecting x-axis (i.e., resale price)\n            type         = \"robust\",                                                      #<< selecting statistical approach (Bootstrap-t method for one-sample test)\n            title        = \"Mean Resale Prices of 3/4/5 Rm HDB by Towns\",                 #<< Plot title\n            xlab         = \"Resale Price (in S$'000)\",                                    #<< x-axis label\n            caption      = \"Source: Data.gov.sg\",                                         #<< Caption\n            ggtheme      = theme_economist()                                              #<< setting theme of plot\n\n)\n\np2 <- ggdotplotstats(\n            data         = resale_filtered2,                                              #<< transformed dataset\n            y            = town,                                                          #<< selecting y-axis (i.e., town)\n            x            = No_of_txn,                                                     #<< selecting x-axis (i.e., no. of txn)\n            type         = \"robust\",                                                      #<< selecting statistical approach (Bootstrap-t method for one-sample test)\n            title        = \"No. of 3/4/5 Rm HDB Transactions by Towns\",                   #<< Plot title\n            xlab         = \"Transaction Count\",                                           #<< x-axis label\n            caption      = \"Source: Data.gov.sg\",                                         #<< Caption\n            ggtheme      = theme_economist()                                              #<< setting theme of plot\n) \n\np3 <- ggscatterstats(\n            data         = resale_filtered3,                                              #<< transformed dataset\n            y            = avg_Px,                                                        #<< selecting y-axis (i.e., avg_Px)\n            x            = avg_Txn_Count,                                                 #<< selecting x-axis (i.e., avg_Txn_Count)\n            xlab         = \"Average Transaction Count\",                                   #<< x-axis label\n            ylab         = \"Resale Price (in S$'000)\",                                    #<< y-axis label\n            marginal = FALSE,\n            ggtheme      = theme_economist()                                              #<< setting theme of plot\n)\n\n\n(p1+p2)/p3\n\n\n\n\n\n\nInsights Revealed by Data Viz\nTowns with the highest location premium\nThe plot is able to clearly display towns with the highest location premium – Central Area, Bishan, Queenstown, Bukit Merah, etc.\nTowns with higher demand\nThe plot is able to clearly display towns with higher demands (proxied by the number of transactions recorded within the towns in 2022) – Seng Kang, Punggol, Yishun, Woodlands, etc.\nExpected Resale Prices to Pay\nFrom the confidence internal, we are 95% confident that a given resale transaction price will fall between the range of $538k and $610k.\nMedium Correlation between resale prices and transaction count\nThe degree of correlation Pearson’s Correlation Coefficient is -0.43, which indicates the correlation between resale prices and transaction count to be at a medium level. This is also observed in the plot where the reference line appears to be slightly tilted downwards."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#analytical-visualization-3---scatter-plot",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#analytical-visualization-3---scatter-plot",
    "title": "Take Home Exercise 3",
    "section": "Analytical Visualization #3 - Scatter Plot",
    "text": "Analytical Visualization #3 - Scatter Plot\n\nSelection and Design Considerations\nThis visualization uses the ggscatterstats() method in the ggstatsplot package to evaluate the association between storey level (i.e., floor level of HDB unit) and resale prices.\n• A scatterplot is used to depict the relationship between the 2 selected variables.\n• A reference line, along with 95% CI cone has been included, which allows the user to visually identify the linear direction of the relationship.\n• Statistical details have also been included in the plot itself.\n• Distribution plots that depict the distribution of the individual attributes are also available to complement the main scatterplot.\n\n\nReproducible Description Data Viz Prep\nThe code chunk below contains the codes required to reproduce this visualization, along with the corresponding annotations which describes the procedures used.\n\n#<< selecting relevant fields for plot and deriving average txn prices by towns\nresale_filtered4 <- resale_filtered %>%\n  select(resale_price, storey_mean, flat_type) %>%             \n  group_by(storey_mean, flat_type)  %>%                \n  summarise(avg_Px=mean(resale_price),\n            .groups = 'drop')  %>%\n  mutate(avg_Px = avg_Px/1000) \n\nset.seed(123)\n\nggscatterstats(\n          data             = resale_filtered4,                                              #<< transformed dataset\n          x                = avg_Px,                                                        #<< selecting x-axis (i.e., avg_Px)\n          y                = storey_mean,                                                   #<< selecting y-axis (i.e., storey mean)\n          ggtheme          = theme_grey(),                                                  #<< setting theme of plot\n          xlab             = \"Resale Price (in S$'000)\",                                    #<< x-axis label\n          ylab             = \"Storey Level\",                                                #<< x-axis label\n          title            = \"Mean Resale Prices of 3 / 4 / 5 Room HDB by Storey Level\"     #<< Plot title\n)\n\n\n\n\n\n\nInsights Revealed by Data Viz\nHigh Positive Association between Storey Level and Resale Prices\nFrom the plot, it can be visually noted that the reference line appears to be clearly directed upwards. Complementing this observation with statistical metrics generated from Pearson’s correlation test (r = 0.82) revealed that, across all towns and flat types, the storey height was positively correlated with resale prices. The p-value (p < 0.05) was also confirmed the statistical details to be statistically significant.\nStorey Level Premium Priced In\nThis is indicative that a storey level premium is also another factor priced into the HDB resale transaction prices (i.e., the higher the storey level of the HDB, the higher the resale transaction price is likely to be)."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#analytical-visualization-4---multiple-linear-regression",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#analytical-visualization-4---multiple-linear-regression",
    "title": "Take Home Exercise 3",
    "section": "Analytical Visualization #4 - Multiple Linear Regression",
    "text": "Analytical Visualization #4 - Multiple Linear Regression\n\nSelection and Design Considerations\nThe Multiple Linear Regression model has been selected because of its simplicity and its performance, allowing us to easily understand how each variable affects the resale price. Several model diagnostic checks from the performance package have also been conducted and visualized. Finally, ggcoefstats() of ggstatsplot package is used to visualise the parameters of the regression model.\n• Visualizing collinearity – plotting highly correlated variables using the check_collinearity() function allow the user to easily identify variables which may suffer from multi-collinearity, for the purposes of calibrating the model.\n• The other model diagnostic checks have also been ran as a form of sanity check prior to building the finalized regression model.\n• The regression model output is visualised using a dot-and-whisker plot, which allows the user to visually identify how each variable impacts the resale prices, along with other statistical details to complement.\n\n\nReproducible Description Data Viz Prep\nThe code chunk below contains the codes required to reproduce this visualization, along with the corresponding annotations which describes the procedures used.\nModel Diagnostic: Multi-Collinearity Check\n\n#<< lm() function used from Base Stats of R\n#<< all attributes selected in first model version\n\nmodel <- lm(resale_price ~ flat_type + floor_area_sqm + lease_commence_date + \n              remaining_lease + storey_mean + SD_Resale_Px + Mean_Resale_Px + No_of_txn,\n            data = resale_filtered)\n\n#<< running of collinearity check\n\ncheck_collinearity(model) %>% plot()\n\n\n\n\nNew Model Diagnostic: Complete check\n\n#<<dropped flat_type and lease_commence_date attributes\nmodel1 <- lm(resale_price ~ #<<flat_type + \n              floor_area_sqm + #<<lease_commence_date + \n               remaining_lease + storey_mean + SD_Resale_Px + Mean_Resale_Px + No_of_txn,\n            data = resale_filtered)\n\n#<< running of model diagnostic checks\ncheck_model(model1)\n\n\n\n\nVisualizing Regression Model\n\nggcoefstats(model1, \n            output = \"plot\")\n\n\n\n\n\n\n\n\n\n\nInsights Revealed by Data Viz\nRemoval of variables with high collinearity\nFlat type and lease commencement date were identified to be variables with high collinearity, which may distort the model performance. As such, these were removed in the re-calibrated model.\nSignificant Attributes Contributing to the model\nThe remaining attributes are validated to be statistically significant (p-value < 0.05): floor_area_sqm, remaining_lease, storey_mean, SD_Resale_Px, Mean_Resale_Px, No_of_txn. The remaining lease and floor level of HDB unit appears to be top variables in determining the HDB resale prices. For instance, for every 1 year increase in remaining lease of the property, the resale price is expected to increase by ~$3698, while for every 1 level increase in floor level, the resale price is expected to increase by ~$4967.\nLow AIC and BIC\nThe low AIC and BIC values are indicative of a good overall model fit."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html",
    "title": "Take Home Exercise 04",
    "section": "",
    "text": "This Take-Home Exercise seeks to uncover the impact of COVID-19 as well as the global economic and political dynamic in 2022 on Singapore’s bi-lateral trade (i.e. Import, Export and Trade Balance) by using appropriate analytical visualisation techniques learned in Lesson 6: It’s About Time.\nThe dataset selected for this exercise is sourced from Singstat.gov.sg and contains data on the Merchandise Imports and Exports by Region / Market.\nFor the purpose of this exercise, the study period will be conducted from January 2020 to December 2022."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#treemap-animation-by-countries",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#treemap-animation-by-countries",
    "title": "Take Home Exercise 04",
    "section": "TREEMAP ANIMATION: BY COUNTRIES",
    "text": "TREEMAP ANIMATION: BY COUNTRIES\n\nSelection & Design Consideration\nThe treemap plot has been selected to visualize Singapore’s largest trading partners by import and export values:\n• Treemaps are able to effectively depict the relative sizes of a country’s trade value at a high level, allowing for quick perception of the countries that are large contributors. • The sequential colour scale helps the user easily identify larger trading partner countries compared to other countries in the same group. • An animation mapping feature has also been incorporated to allow users to visually see the changes across the time period.\n\n\nReproducible Procedures\nThe code chunk below contains the codes required to reproduce this visualization, along with the corresponding annotations which describes the procedures used.\n\n#<< PREPARING DATASET IN LONG FORMAT\ncountry_import_long <- import %>%\n  select(-2, -3, -4, -5, -6, -7, -8) %>%\n  pivot_longer(                                                             #<< pivot longer to convert columns to rows with values as new numeric values column\n     cols = -c('date'), \n     names_to = \"country\",\n     values_transform = as.numeric,\n     values_to = \"import_value\") %>%\n  mutate(val_mil = round(import_value/1000000,1),                           #<< rounding values to millions for easy viewability\n         val_mil = \n           format(round(as.numeric(val_mil), 1), nsmall=1, big.mark=\",\")    #<< formatting to add thousands separator\n         ) %>%\n  unite(\"labels\", country,val_mil, sep = \"\\n\", remove = FALSE)              #<< create treemap labels\n\n#<< PLOTTING IMPORT TREEMAP\np1 <- country_import_long %>%\n  filter(import_value > 0) %>%                                              #<< remove country lines where import value = 0\n  ggplot(aes(area = import_value, fill = import_value, label = labels)) +   #<< ggplot function - set area / fill / labels\n  theme(legend.position = \"none\",                                     \n        plot.title = element_text(size = 25, face = \"bold\"),\n        plot.caption = element_text(size = 15)) +\n  geom_treemap() +                                                          #<< plot treemap - default squarify layout\n  geom_treemap_text(place = \"centre\", grow = TRUE, colour = \"white\") +      #<< label text to grow and fill square size\n  transition_time(date) +                                                   #<< transition based on time attribute\n  ease_aes('linear') +                                                      #<< linear progression\n  labs(title = \"SG Bilateral Trade Imports - Period: {frame_time}\",         #<< setting of Plot Title and Caption\n       caption = \"The area of each tile represents the value of SG's imports (in millions) by Country\")\n\n#<< save animation as gif file, set number of frames and plot size\nanim_save(\"animated_treemap_import.gif\", p1, nframes = 216, width = 600, height = 600)\n\n#<< PREPARING DATASET IN LONG FORMAT\ncountry_export_long <- export %>%\n  select(-2, -3, -4, -5, -6, -7, -8) %>%\n  pivot_longer(                                                             #<< pivot longer to convert columns to rows with values as new numeric values column\n     cols = -c('date'), \n     names_to = \"country\",\n     values_transform = as.numeric,\n     values_to = \"export_value\") %>%\n  mutate(val_mil = round(export_value/1000000,1),                           #<< rounding values to millions for easy viewability\n         val_mil = \n           format(round(as.numeric(val_mil), 1), nsmall=1, big.mark=\",\")    #<< formatting to add thousands separator\n         ) %>%\n  unite(\"labels\", country,val_mil, sep = \"\\n\", remove = FALSE)              #<< create treemap labels\n\n#<< PLOTTING IMPORT TREEMAP\np2 <- country_export_long %>%\n  filter(export_value > 0) %>%                                              #<< remove country lines where import value = 0\n  ggplot(aes(area = export_value, fill = export_value, label = labels)) +   #<< ggplot function - set area / fill / labels\n  theme(legend.position = \"none\", \n        plot.title = element_text(size = 25, face = \"bold\"),\n        plot.caption = element_text(size = 15)) +\n  geom_treemap() +                                                          #<< plot treemap - default squarify layout\n  geom_treemap_text(place = \"centre\", grow = TRUE, colour = \"white\") +      #<< label text to grow and fill square size\n  transition_time(date) +                                                   #<< transition based on time attribute\n  ease_aes('linear') +                                                      #<< linear progression\n  labs(title = \"SG Bilateral Trade Exports - Period: {frame_time}\",         #<< setting of Plot Title and Caption\n       caption = \"The area of each tile represents the value of SG's imports (in millions) by Country\")\n\n#<< save animation as gif file, set number of frames and plot size\nanim_save(\"animated_treemap_export.gif\", p2, nframes = 216, width = 600, height = 600)\n\n\n\n\n\n\n\nSG Trade Imports: Jan 2020 - Dec 2022\n\n\n\n\n\n\n\nSG Trade Exports: Jan 2020 - Dec 2022\n\n\n\n\n\n\n\nPatterns Revealed by Visualisation\nChina, Malaysia, Taiwan, United States are Singapore’s major trading partners.\nThis has not significantly changed during the COVID-19 period. From the trade value displayed within the treemap grids, the COVID-19 effect was evident, where both import and export values of the top countries ranged around $5bn at the peak of the COVID-19 period (year 2020), before rising to ~$7bn in the years after."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#stacked-bar-chart-top-15-trading-partners",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#stacked-bar-chart-top-15-trading-partners",
    "title": "Take Home Exercise 04",
    "section": "STACKED BAR CHART: TOP 15 TRADING PARTNERS",
    "text": "STACKED BAR CHART: TOP 15 TRADING PARTNERS\n\nSelection & Design Consideration\nThe stacked bar chart has been selected to allow for easy comparison between countries. Given that the bars are proportional to the values represented, there was a risk that the countries with extreme high trading values would result in the data for “smaller countries” being compressed and hence hidden. As such, I decided to transform the dataset by using rate of change in % instead. This would allow for ease of comparison over the given time period between the countries based on % values. An interactive tooltip element was added as well to provide additional complementary information for users, displaying trade value in dollar terms as well as other associated information to the bar on hover.\n\n\nReproducible Procedures\nThe code chunk below contains the codes required to reproduce this visualization, along with the corresponding annotations which describes the procedures used.\n\ncountry_import_long_1 <- import %>%\n  select(-2, -3, -4, -5, -6, -7, -8) %>%                                    #<< remove uninterested columns (total, regional)\n  mutate(year = year(date)) %>%                                             #<< aggregate and sum values by year\n  aggregate(.~year, sum) %>%                                                \n  pivot_longer(                                                             #<< pivot longer to convert columns to rows with values as new numeric values column\n     cols = -c('date','year'), \n     names_to = \"country\",\n     values_transform = as.numeric,\n     values_to = \"import\") %>%\n  select(-c('date'))\n\ncountry_export_long_1 <- export %>%\n  select(-2, -3, -4, -5, -6, -7, -8) %>%                                    #<< remove uninterested columns (total, regional)\n  mutate(year = year(date)) %>%                                             #<< aggregate and sum values by year\n  aggregate(.~year, sum) %>%                                                \n  pivot_longer(                                                             #<< pivot longer to convert columns to rows with values as new numeric values column\n     cols = -c('date','year'), \n     names_to = \"country\",\n     values_transform = as.numeric,\n     values_to = \"export\") %>%\n  select(-c('date'))\n\ncountry_long_1 <- inner_join(country_export_long_1,                         #<< combining import and export dataset\n                             country_import_long_1) %>%             \n  pivot_longer(                                                             #<< pivot longer to convert columns to rows with values as new numeric values column\n     cols = c('export', 'import'), \n     names_to = \"Merc_Trade\",\n     values_transform = as.numeric,\n     values_to = \"TradeValue\") %>%\n    group_by(country, Merc_Trade) %>% \n  arrange(year, country, Merc_Trade) %>% \n  mutate(rateofchange                                                       #<< derive rate of change column\n         = 100 * (TradeValue - lag(TradeValue))/lag(TradeValue),\n         rateofchange = round(rateofchange,1)) %>%\n  ungroup() %>%\n  filter(year != 2020)                                                      #<< remove year 2020 as ROC will be NULL\n\ntop15countries <- country_long_1 %>%                                        #<< Derive Top 5 trading partner countries during period\n  select(country, TradeValue) %>%                                           \n  group_by(country)  %>%                                                    #<< Group by countries , sum import / export\n  summarise(sum_TV=sum(TradeValue),\n            .groups = 'drop') %>%\n  arrange(desc(sum_TV)) %>%                                                 #<< Sort countries by trade value in descending order\n  slice(0:15)                                                               #<< select top 15 countries\n\n#<< Inner join back to main dataset to get full data only for the Top 5 countries\ncountry_long_1_top15 <- inner_join(country_long_1, \n                              top15countries) %>%\n  mutate(TradeValue_bil = round(TradeValue/1000000000,1)) \n\ncountry_long_1_top15$tooltip <- c(paste0(                                   #<< Creating annotations for tooltip\n  \"Country = \", country_long_1_top15$country,\n  \"\\n Trade Type = \", country_long_1_top15$Merc_Trade,\n  \"\\n Trade Value (bn) = $\", country_long_1_top15$TradeValue_bil,\n  \"\\n Rate of % Change from prev year = \", country_long_1_top15$rateofchange))\n\np <- ggplot(country_long_1_top15,                                 \n            aes(fill=Merc_Trade, y=rateofchange, x = country, \n                label = rateofchange)) +\n  hrbrthemes::theme_ipsum(grid=\"Y\") +\n  geom_bar_interactive(                                                     #<< plotting interactive stacked bar\n    aes(tooltip = tooltip), position=\"stack\", stat=\"identity\") +\n  geom_text(\n    position = position_stack(vjust = 0.5), size = 2, color = \"#ffffff\") +\n  theme(legend.position=\"bottom\") +                                         #<< setting of themes, titles and legends\n  guides(fill=guide_legend(title=\"Merchandise Trade Type\")) +\n  ggtitle(\"Changes in SG Merchandise Trade: Top 15 Countries (2020-2022)\") +\n  ylab(\"Rate of Change in %\") +\n  xlab(\"Trade Partner (by Country))\") +\n  labs(caption = \"Note:2021 represents the rate of % change from 2020 to 2021 by import / export trade type.\\n2022 represents the rate of % change from 2021 to 2022 by import / export trade type.\") +\n  theme(\n    axis.title = element_text(size=8), \n    axis.text.x = element_text(size=8, angle=45, hjust = 0.75), \n    legend.title = element_text(size=8), #change legend title font size\n    legend.text = element_text(size=8), \n    legend.key.size = unit(0.3, 'cm')\n  ) + \n  facet_wrap(~ year, ncol = 1)                                              #<< facet wrap for trellis plot \n\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 8,                        \n  height_svg = 8                   \n)     \n\n\n\n\n\n\n\nPatterns Revealed by Visualisation\nAn interesting insight that was observed was that although Hong Kong is one of the top export countries for Singapore, exports to Hong Kong actually dropped year on year during the COVID-19 period. On the flipside, the UAE is ranked 13th out of the top 15 trading partners of Singapore, but the rate of change for both imports and exports ranked the highest amongst the countries."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#line-plot-top-15-trading-partners-time-series",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#line-plot-top-15-trading-partners-time-series",
    "title": "Take Home Exercise 04",
    "section": "LINE PLOT: TOP 15 TRADING PARTNERS TIME SERIES",
    "text": "LINE PLOT: TOP 15 TRADING PARTNERS TIME SERIES\n\nSelection & Design Consideration\nA line chart in a trellis format was selected to depict the time series trends of export and import trades.The differences between import and export values was also highlighted in a color coordinated format to allow the user to visually identify if the trading partner was a net exporter or importer (i.e., green: export > import, red: import > export).\n\n\nReproducible Procedures\nThe code chunk below contains the codes required to reproduce this visualization, along with the corresponding annotations which describes the procedures used.\n\n#<< install development version from github\n#install.packages(\"remotes\")\n#remotes::install_github(\"nsgrantham/ggbraid\")\n\n#<< PREPARING DATASET IN LONG FORMAT\ncountry_import_long_1 <- import %>%\n  select(-2, -3, -4, -5, -6, -7, -8) %>%                                    #<< remove uninterested columns (total, regional)\n  pivot_longer(                                                             #<< pivot longer to convert columns to rows with values as new numeric values column\n    cols = -c('date'), \n    names_to = \"country\",\n    values_transform = as.numeric,\n    values_to = \"import\")\n\ncountry_export_long_1 <- export %>%\n  select(-2, -3, -4, -5, -6, -7, -8) %>%                                    #<< remove uninterested columns (total, regional)\n  pivot_longer(                                                             #<< pivot longer to convert columns to rows with values as new numeric values column\n    cols = -c('date'), \n    names_to = \"country\",\n    values_transform = as.numeric,\n    values_to = \"export\") \n\ncountry_long_1 <- inner_join(country_export_long_1,                         #<< combining import and export dataset\n                             country_import_long_1) %>%             \n  pivot_longer(                                                             #<< pivot longer to convert columns to rows with values as new numeric values column\n    cols = c('export', 'import'), \n    names_to = \"Merc_Trade\",\n    values_transform = as.numeric,\n    values_to = \"TradeValue\") %>%\n  mutate(TradeValue_bil = round(TradeValue/1000000000,1))                   #<< rounding value to billions\n\ntop15countries <- country_long_1 %>%                                        #<< Derive Top 5 trading partner countries during period\n  select(country, TradeValue) %>%                                           \n  group_by(country)  %>%                                                    #<< Group by countries , sum import / export\n  summarise(sum_TV=sum(TradeValue),\n            .groups = 'drop') %>%\n  arrange(desc(sum_TV)) %>%                                                 #<< Sort countries by trade value in descending order\n  slice(0:15)                                                               #<< select top 15 countries\n\n#<< create a wide data format\ncountry_long_1_top15_wide <- inner_join(country_long_1, \n                              top15countries) %>%\n   select(date, country, Merc_Trade, TradeValue_bil) %>%\n   pivot_wider(names_from = Merc_Trade,\n             values_from = TradeValue_bil)\n\n#<< create long dataset for top 15 countries\ncountry_long_1_top5_long <- inner_join(country_long_1, \n                              top15countries)\n\nggplot() +\n  geom_line(aes(date, TradeValue_bil, linetype = Merc_Trade),               #<< plotting geomline, with Merc_Trade to distinguish the lines\n            data = country_long_1_top5_long, size=1) +\n  ggbraid::geom_braid(aes(x = date,                                         #<< using geom_braid to highlight the areas between the 2 lines\n                  ymin = import,\n                  ymax = export,\n                  fill = import < export), \n                  data = country_long_1_top15_wide,\n              alpha = 0.6\n              ) +\n  guides(linetype = \"none\", fill = \"none\") +\n  hrbrthemes::theme_ipsum(grid=\"Y\") +                                       #<< setting of plot theme\n  facet_wrap(~country, ncol = 5) +                                          #<< facet wrap for trellis plot\n    labs(title = \"Monthly Export & Import Trade Values: Top 6 Trading Partners (Jan20-Dec22)\",\n         caption = \"Note: The shaded green area represents Export value > Import value, indicating a trade surplus. \\n The shaded red area represents Export value < Import value, indicating a trade deficit.\") +\n  ylab(\"Trade Value (in Billions)\") +\n  xlab(\"Time period\") +\n  theme(\n    axis.title = element_text(size=8), \n    axis.text.x = element_text(size=6, angle=45, hjust = 1)\n  )\n\n\n\n\n\n\nPatterns Revealed by Visualisation\n• Singapore’s exports outweighs imports.\nVisually from the plot, it is evident that the green area marginally appears more than the red area. This implies that singapore’s exports outweigh imports. This finding is consistent with the trade summary referenced from World Bank.org.\n• Exports to some countries grew during COVID-19 period\nZooming into the Mainland China, United States and Republic of Korea plot, from the 1st quarter of 2020, exports to these countries grew during the height of the pandemic before leveling off subsequently. In the case of Korea and US, the leveling off occurred earlier in 2021, while China only started in 2022, likely due to China’s delayed post-pandemic opening."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html",
    "title": "Hands on Exercise 08",
    "section": "",
    "text": "Installing and Loading R Packages\n\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts)\n\n\nImporting Data\n\nGAStech_nodes <- read_csv(\"data/GAStech_email_node.csv\")\n\nglimpse(GAStech_nodes)\n\nRows: 54\nColumns: 4\n$ id         <dbl> 1, 2, 3, 4, 5, 6, 7, 44, 45, 46, 8, 9, 10, 11, 12, 13, 14, …\n$ label      <chr> \"Mat.Bramar\", \"Anda.Ribera\", \"Rachel.Pantanal\", \"Linda.Lago…\n$ Department <chr> \"Administration\", \"Administration\", \"Administration\", \"Admi…\n$ Title      <chr> \"Assistant to CEO\", \"Assistant to CFO\", \"Assistant to CIO\",…\n\n\n\nGAStech_edges <- read_csv(\"data/GAStech_email_edge-v2.csv\")\n\nglimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 8\n$ source      <dbl> 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      <dbl> 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    <chr> \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    <time> 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     <chr> \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject <chr> \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel <chr> \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel <chr> \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n\n\n\n\nData Wrangling\n\nGAStech_edges <- GAStech_edges %>%\n  mutate(SendDate = dmy(SentDate)) %>%            #<< defining date data type\n  mutate(Weekday = wday(SentDate,                 #<< give the date/time field a date structure (to derive the day of the week)\n                        label = TRUE,\n                        abbr = FALSE))\n\nglimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 10\n$ source      <dbl> 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      <dbl> 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    <chr> \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    <time> 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     <chr> \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject <chr> \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel <chr> \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel <chr> \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n$ SendDate    <date> 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-0…\n$ Weekday     <ord> Friday, Friday, Friday, Friday, Friday, Friday, Friday, Fr…\n\n\n\nGAStech_edges_aggregated <- GAStech_edges %>%     \n  filter(MainSubject == \"Work related\") %>%       #<< only search for work related email\n  group_by(source, target, Weekday) %>%           #<< find out number emails that A sends to B on a given weekday\n    summarise(Weight = n()) %>%\n  filter(source!=target) %>%                      #<< minus email that send to self\n  filter(Weight > 1) %>%                          #<< only retain entries where email has been sent more than once\n  ungroup()\n\nhead(GAStech_edges_aggregated)\n\n# A tibble: 6 × 4\n  source target Weekday   Weight\n   <dbl>  <dbl> <ord>      <int>\n1      1      2 Sunday         5\n2      1      2 Monday         2\n3      1      2 Tuesday        3\n4      1      2 Wednesday      4\n5      1      2 Friday         6\n6      1      3 Sunday         5\n\n\n\n\nBuild TidyGraph Data Model\n\n#<< converting into TidyGraph data model\nGAStech_graph <- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)\n\n#<< Order by weight desc\nGAStech_graph %>%\n  activate(edges) %>%\n  arrange(desc(Weight))\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 1,372 × 4 (active)\n   from    to Weekday  Weight\n  <int> <int> <ord>     <int>\n1    40    41 Saturday     13\n2    41    43 Monday       11\n3    35    31 Tuesday      10\n4    40    41 Monday       10\n5    40    43 Monday       10\n6    36    32 Sunday        9\n# … with 1,366 more rows\n#\n# Node Data: 54 × 4\n     id label           Department     Title           \n  <dbl> <chr>           <chr>          <chr>           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# … with 51 more rows\n\n\n\n\nPlotting Network Data\nBasic Network Graph\n\ng <- ggraph(GAStech_graph) + \n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph(                           #<< Changing the default network graph theme\n  background = 'grey10',\n                text_colour = 'white'      #<< customizing colouring of plot\n)\n\n\n\n\nUsing Fruchterman and Reingold layout\n\ng <- ggraph(GAStech_graph, \n            layout = \"fr\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\nFurther Modifying Network Nodes\n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department, \n                      size = 3))\n\ng + theme_graph()\n\n\n\n\nModifying Edges\n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 3)\n\ng + theme_graph()\n\n\n\n\nCreating Facet Graphs\n\nset_graph_style()\n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  #<<+  theme(legend.position = 'bottom')      #<< add themes to further customize\n\ng + facet_edges(~Weekday) \n\n\n\n#<< adding a frame to each facet graph\n  #<< + th_foreground(foreground = \"grey80\",  \n  #<<              border = TRUE) \n  #<< + theme(legend.position = 'bottom')\n\nWorking with FACET_NODES()\n\nset_graph_style()\n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \n#<< facet by department\ng + facet_nodes(~Department)+\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')\n\n\n\n\n\n\nNetwork Metrics Analysis\nIncorporating Statistical Measures: Computing Centrality Indices\n\ng <- GAStech_graph %>%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department, \n                      size = centrality_betweenness()))\ng + theme_graph()\n\n\n\n\nVisualising Communities\n\ng <- GAStech_graph %>%\n  mutate(community = as.factor(group_edge_betweenness(weights = Weight, directed = TRUE))) %>%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = community))  \n\ng + theme_graph()\n\n\n\n\n\n\nBuilding Interactive Network Graph with visNetwork\nData Preparation\n\nGAStech_edges_aggregated <- GAStech_edges %>%\n  left_join(GAStech_nodes, by = c(\"sourceLabel\" = \"label\")) %>%\n  rename(from = id) %>%\n  left_join(GAStech_nodes, by = c(\"targetLabel\" = \"label\")) %>%\n  rename(to = id) %>%\n  filter(MainSubject == \"Work related\") %>%\n  group_by(from, to) %>%\n    summarise(weight = n()) %>%\n  filter(from!=to) %>%\n  filter(weight > 1) %>%\n  ungroup()\n\nInteractive Network Graph\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") \n\n\n\n\n\nVisual Attributes - Nodes\n\nGAStech_nodes <- GAStech_nodes %>%\n  rename(group = Department) \n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visLegend() %>%\n  visLayout(randomSeed = 123)\n\n\n\n\n\nVisual Attributes - Edges\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %>%\n  visLegend() %>%\n  visLayout(randomSeed = 123)\n\n\n\n\n\nFurther Interactivity\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = TRUE) %>%\n  visLegend() %>%\n  visLayout(randomSeed = 123)"
  }
]