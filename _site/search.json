[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Hi There! My name is Cheryl. I’m a part time student currently pursuing the Master of IT in Business (MITB) programme with Singapore Management University (SMU)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "pacman::p_load(tidyverse, patchwork, \n               ggthemes, hrbrthemes,\n               ggrepel) \n\n\n\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "title": "In Class Exercise 04",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#running-code",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#running-code",
    "title": "In Class Exercise 04",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "title": "Hands On Exercise 05",
    "section": "",
    "text": "pacman::p_load(ggtern, plotly, tidyverse)\n\n\n\n\n\npop_data <- read_csv(\"data/respopagsex2000to2018_tidy.csv\") \n\n\n\n\n\nagpop_mutated <- pop_data %>%\n  mutate(`Year` = as.character(Year))%>%          #<< change datatype of YEAR to character\n  pivot_wider(names_from = AG, \n              values_from = Population) %>%       #<< transpose values from AG into columns\n  mutate(YOUNG = rowSums(.[4:8]))%>%              #<< sum of values by rows\n  mutate(ACTIVE = rowSums(.[9:16]))  %>%\n  mutate(OLD = rowSums(.[17:21])) %>%\n  mutate(TOTAL = rowSums(.[22:24])) %>%\n  filter(Year == 2018)%>%                         #<< filter for Year 2018 only\n  filter(TOTAL > 0)                               #<< filter where total count > 0\n\n\n\n\n\nggtern::ggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point() +\n  labs(title=\"Population structure, 2015\") +\n  theme_rgbw()\n\n\n\n\n\n\n\n\nlabel <- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\naxis <- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes <- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\"\n) %>%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#correlation-matrices",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#correlation-matrices",
    "title": "Hands On Exercise 05",
    "section": "Correlation Matrices",
    "text": "Correlation Matrices\n\nInstalling and Loading R Packages\n\npacman::p_load(corrplot, ggstatsplot, tidyverse)\n\n\n\nImporting Data\n\nwine <- read_csv(\"data/wine_quality.csv\")\n\n\n\nBasic Correlation Matrix\n\npairs(wine[,1:11])\n\n\n\n\n\n\nIncluding Plot with Correlation Coefficients\n\npanel.cor <- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr <- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr <- abs(cor(x, y, use=\"complete.obs\"))\ntxt <- format(c(r, 0.123456789), digits=digits)[1]\ntxt <- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)\n\n\n\n\n\n\nPlot using ggCorrmat\n\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n)\n\n\n\n\n\n\nVisualising using Corrplot Package\n\nwine.cor <- cor(wine[, 1:11])\n\ncorrplot(wine.cor, \n         method = \"ellipse\",     #<< appear as semicircle rather than full circle\n         type=\"lower\",           #<< only show the lower half\n         diag = FALSE,           #<< turn of diagonal cells\n         tl.col = \"black\")       #<< axis labels to black\n\n\n\n\n\n\nIncluding numerical data in matrix\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\",     #<< appear as semicircle rather than full circle\n               upper = \"number\",      #<< show numbers in upper side\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\nIncluding test of significance\n\nwine.sig = cor.mtest(wine.cor, conf.level= .95)      #<< compute the p-values and confidence interval\n\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)\n\n\n\n\n\n\nReordering using hierarchical clustering\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",       #<< clustering method\n         addrect = 3)                    #<< 3 clusters defined"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#heatmaps-for-multivariate-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#heatmaps-for-multivariate-data",
    "title": "Hands On Exercise 05",
    "section": "Heatmaps for Multivariate Data",
    "text": "Heatmaps for Multivariate Data\n\nInstalling and Loading R Packages\n\npacman::p_load(seriation, dendextend, heatmaply, tidyverse)\n\n\n\nImporting Data\n\nwh <- read_csv(\"data/WHData-2018.csv\")\n\n\n\nData Preparation\n\nrow.names(wh) <- wh$Country                   #<< change the rows by country name instead of row number\n\nwh1 <- dplyr::select(wh, c(3, 7:12))          #<< select interested column values\n\nwh_matrix <- data.matrix(wh)                  #<< transform into matrix\n\n\n\nHeatmap() of R Stats\n\nwh_heatmap <- heatmap(wh_matrix,\n                      scale=\"column\",          #<< Scaling of values\n                      cexRow = 0.6,            #<< used to define the font size used for y-axis and x-axis labels \n                      cexCol = 0.8,\n                      margins = c(10, 4))      #<< ensure that the entire x-axis labels are displayed completely\n\n\n\n\n\n\nInteractive Heatmap using HeatMaply\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")                    #<< Scaling of values - when assumed normal distribution\n\n\n\n\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n#<< normalization is used when distribution is non-normal\n\n\n\nVisualizing Hierarchical Clustering\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")\n\n\n\n\n\n\n\nStatistical Approach to Hierarchical Clustering\nDetermining the best method\n\nwh_d <- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = \"euclidean\")\ndend_expend(wh_d)[[3]]               #<< used to determine the recommended clustering method to be used - USE THE METHOD WITH THE HIGHEST OPTIMUM VALUE\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6137851\n2      unknown        ward.D2 0.6289186\n3      unknown         single 0.4774362\n4      unknown       complete 0.6434009\n5      unknown        average 0.6701688\n6      unknown       mcquitty 0.5020102\n7      unknown         median 0.5901833\n8      unknown       centroid 0.6338734\n\n\nDetermining the optimal number of cluster\n\nwh_clust <- hclust(wh_d, method = \"average\")     #<< input based on best method\nnum_k <- find_k(wh_clust)\nplot(num_k)\n\n\n\n\nCluster based on Optimum Inputs\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3)\n\n\n\n\n\n\n\nOptimal Leaf Ordering (OLO) - Alt Method for Ordering Constraints due to HClustering\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"GW\")                     #<< seriate = OLO or GW\n\n\n\n\n\n\n\nWorking with Colour Palettes\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Blues,                         #<< heatmap colour themes\n          k_row = 5,                              #<< 5 clusters\n          margins = c(NA,200,60,NA),              #<< change the top margin to 60 and row margin to 200   \n          fontsize_row = 4,                       #<< change the font size for row and column labels\n          fontsize_col = 5,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\"\n          )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#parallel-coordinates-plots",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#parallel-coordinates-plots",
    "title": "Hands On Exercise 05",
    "section": "Parallel Coordinates Plots",
    "text": "Parallel Coordinates Plots\n\nInstalling and Loading R Packages\n\npacman::p_load(GGally, parallelPlot, tidyverse)\n\n\n\nImporting Data\n\nwh <- read_csv(\"data/WHData-2018.csv\")\n\n\n\nPlotting Static Parallel Coordinates Plot\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\")\n\n\n\n\n\n\nParallel Coordinates with Facet (+ Rotating x-axis label)\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) +                             #<< facet wrap by Region\n  theme(axis.text.x = element_text(angle = 30, hjust=1))      #<< Rotating x-axis label + adjust alignment\n\n\n\n\n\nPlotting Interactive Parallel Coordinates Plot\n\nwh <- wh %>%\n  select(\"Happiness score\", c(7:12))\nparallelPlot(wh,\n             width = 320,\n             height = 250)\n\n\n\n\n\nRotating Title to avoid overlapping axist labels\n\nparallelPlot(wh,\n             rotateTitle = TRUE)\n\n\n\n\n\nPlot Histogram overlay\n\nhistoVisibility <- rep(TRUE, ncol(wh))\nparallelPlot(wh,\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "title": "In Class Exercise 3",
    "section": "",
    "text": "Installing and Loading R Packages\nTwo packages will be installed and loaded. They are: tidyverse and ggiraph\n\npacman::p_load(ggiraph, tidyverse) \n\n\n\nImporting Data\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\n\n\nExploring Interactive Tooltip Effect\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\nDisplaying Multiple Information on Tooltip\n\nexam_data$tooltip <- c(paste0(     #<<\n  \"Name = \", exam_data$ID,         #<<\n  \"\\n Class = \", exam_data$CLASS)) #<<\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), #<<\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\n\n\nCustomizing / Formatting Tooltip Styles\n\ntooltip_css <- \"background-color:white; #<<\nfont-style:bold; color:black;\" #<<\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #<<\n    opts_tooltip(    #<<\n      css = tooltip_css)) #<<\n)                                        \n\n\n\n\n\n\n\nDisplaying statistics on tooltip\n\ntooltip <- function(y, ymax, accuracy = .01) {   #<<\n  mean <- scales::number(y, accuracy = accuracy) #<<\n  sem <- scales::number(ymax - y, accuracy = accuracy) #<<\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem) #<<\n} #<<\n\ngg_point <- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  #<<\n                     tooltip(y, ymax))),  #<<\n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  #<<\n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\nHover Effect - Using another attribute as an aesthetic\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        #<<\n    opts_hover(css = \"fill: #202020;\"),  #<<\n    opts_hover_inv(css = \"opacity:0.2;\") #<<\n  )                                      #<<  \n)                                                                              \n\n\n\n\n\n\n\nCombining tooltip and hover effect\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, #<<\n        data_id = CLASS),#<<              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\n\nAction Buttons: Click effect with onclick (Hyperlink)\n\nexam_data$onclick <- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              #<<\n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n\n\n\n\n\n\nCoordinated Views between 2 plots #QUESTION ON PLOT SIZE\n\np1 <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + #<<\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 <- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + #<<\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\n#girafe(code = print(p1 / p2), #<<\n#       width_svg = 8,\n#       height_svg = 8\n#        )\n\n\n\nInteractive Data Table\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\nInteractive Data Table with Plot\n\npacman::p_load(plotly) #<< Package Load\n\nd <- highlight_key(exam_data) \np <- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg <- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnimated Plots\n\npacman::p_load(readxl, gganimate, gifski, gapminder) #<< Package Load\n\n###<< Data Import / Data Conversion\n\ncol <- c(\"Country\", \"Continent\")\nglobalPop <- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %>%\n  mutate_each_(funs(factor(.)), col) %>%\n  mutate(Year = as.integer(Year))\n\n###<< Build Animated Bubble Plot\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       #<<\n  ease_aes('linear')            #<<\n\n\n\n\n\n\nVisualizing Large Datasets #How does the Packed Bar Method WOrk?\n\npacman::p_load(readr, rPackedBar) #<< Package Load\n\n#<< Import Data\nGDP <- read_csv(\"data/GDP.csv\")\nWorldCountry <- read_csv(\"data/WorldCountry.csv\")\n\n#<< Data Prep\nGDP_selected <- GDP %>%\n  mutate(Values = as.numeric(`2020`)) %>%\n  select(1:3, Values) %>%\n  pivot_wider(names_from = `Series Name`,\n              values_from = `Values`) %>%\n  left_join(y=WorldCountry, by = c(\"Country Code\" = \"ISO-alpha3 Code\"))\n\nGDP_selected <- GDP %>%\n  mutate(GDP = as.numeric(`2020`)) %>%\n  filter(`Series Name` == \"GDP (current US$)\") %>%\n  select(1:2, GDP) %>%\n  na.omit()\n\np = plotly_packed_bar(\n  input_data = GDP_selected,\n  label_column = \"Country Name\",\n  value_column = \"GDP\",\n  number_rows = 10,\n  plot_title = \"Top 10 countries by GDP, 2020\",\n  xaxis_label = \"GDP (US$)\",\n  hover_label = \"GDP\",\n  min_label_width = 0.018,\n  color_bar_color = \"#00aced\",\n  label_color = \"white\")\nplotly::config(p, displayModeBar = FALSE)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "title": "In Class Exercise 4",
    "section": "",
    "text": "pacman::p_load(plotly, DT, tidyverse, patchwork, ggstatsplot, tidyverse) \n\n\n\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\nplot_ly(data = exam_data,\n        x = ~ENGLISH,\n        y = ~MATHS,\n        color = ~RACE) #<<\n\n\n\n\n\n\n\n\n\np <- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(dotsize = 1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p) #<<\n\n\n\n\n\n\n\n\n\nset.seed(1234)\n\ngghistostats(\n  data = exam_data,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nggbetweenstats(\n  data = exam_data,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\nggbetweenstats(\n  data = exam_data,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\nggscatterstats(\n  data = exam_data,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = TRUE, #<<\n  )\n\n\n\n\n\n\n\nInstalling and Loading R Packages\n\npacman::p_load(readxl, performance, parameters, see)\n\nImporting Data\n\ncar_resale <- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\") #<< need to specify tab as file has 2 tabs\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model       Price Age_0…¹ Mfg_M…² Mfg_Y…³     KM Quart…⁴ Weight Guara…⁵\n   <dbl> <chr>       <dbl>   <dbl>   <dbl>   <dbl>  <dbl>   <dbl>  <dbl>   <dbl>\n 1    81 TOYOTA Cor… 18950      25       8    2002  20019     100   1180       3\n 2     1 TOYOTA Cor… 13500      23      10    2002  46986     210   1165       3\n 3     2 TOYOTA Cor… 13750      23      10    2002  72937     210   1165       3\n 4     3  TOYOTA Co… 13950      24       9    2002  41711     210   1165       3\n 5     4 TOYOTA Cor… 14950      26       7    2002  48000     210   1165       3\n 6     5 TOYOTA Cor… 13750      30       3    2002  38500     210   1170       3\n 7     6 TOYOTA Cor… 12950      32       1    2002  61000     210   1170       3\n 8     7  TOYOTA Co… 16900      27       6    2002  94612     210   1245       3\n 9     8 TOYOTA Cor… 18600      30       3    2002  75889     210   1245       3\n10    44 TOYOTA Cor… 16950      27       6    2002 110404     234   1255       3\n# … with 1,426 more rows, 28 more variables: HP_Bin <chr>, CC_bin <chr>,\n#   Doors <dbl>, Gears <dbl>, Cylinders <dbl>, Fuel_Type <chr>, Color <chr>,\n#   Met_Color <dbl>, Automatic <dbl>, Mfr_Guarantee <dbl>,\n#   BOVAG_Guarantee <dbl>, ABS <dbl>, Airbag_1 <dbl>, Airbag_2 <dbl>,\n#   Airco <dbl>, Automatic_airco <dbl>, Boardcomputer <dbl>, CD_Player <dbl>,\n#   Central_Lock <dbl>, Powered_Windows <dbl>, Power_Steering <dbl>,\n#   Radio <dbl>, Mistlamps <dbl>, Sport_Model <dbl>, Backseat_Divider <dbl>, …\n\n\n\nmodel <- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel #<<GTSUMMARY package - to convert output to data frame (tbl_regression)\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\nCheck for multicollinearity\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Guarantee_Period  1.04   [1.01, 1.17]         1.02      0.97     [0.86, 0.99]\n        Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n         Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\nHigh Correlation\n\n   Term  VIF   VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n     KM 1.46 [1.37, 1.57]         1.21      0.68     [0.64, 0.73]\n Weight 1.41 [1.32, 1.51]         1.19      0.71     [0.66, 0.76]\n\n\nPlot multicollinearity\n\ncheck_c <- check_collinearity(model)\n\nplot(check_c)\n\n\n\n\nCheck for normality\n\nmodel1 <- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale) #<< Drop attribute with high collinearity\n\ncheck_n <- check_normality(model1)\n\ncheck_n\n\nWarning: Non-normality of residuals detected (p < .001).\n\nplot(check_n)\n\n\n\n\nCheck for homogeneity\n\ncheck_h <- check_heteroscedasticity(model1)\n\nplot(check_h)\n\n\n\n\nCheck for Everything\n\ncheck_model(model1)\n\n\n\n\n\n\n\n\nplot(parameters(model1))\n\n\n\n\n\nggcoefstats(model1, \n            output = \"plot\") \n\n\n\n\n\n\n\nInstalling and Loading R Packages\n\npacman::p_load(tidyverse, plotly, crosstalk, DT, ggdist, gganimate)\n\nImporting Data\n\nexam <- read_csv(\"data/Exam_data.csv\")\n\nFormatting Statistical Data (Data Prep)\n\nmy_sum <- exam %>%\n  group_by(RACE) %>%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %>%\n  mutate(se=sd/sqrt(n-1))\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n \n  \n    RACE \n    n \n    mean \n    sd \n    se \n  \n \n\n  \n    Chinese \n    193 \n    76.50777 \n    15.69040 \n    1.132357 \n  \n  \n    Indian \n    12 \n    60.66667 \n    23.35237 \n    7.041005 \n  \n  \n    Malay \n    108 \n    57.44444 \n    21.13478 \n    2.043177 \n  \n  \n    Others \n    9 \n    69.66667 \n    10.72381 \n    3.791438 \n  \n\n\n\n\n\nVisualizing using GGPlot\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean \n          maths score by rac\")\n\n\n\n\nVisualizing using GGDist\n\nexam %>%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to ISSS608 - Visual Analytics and Applications homepage. In this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "This take-home exercise uses data sourced from Department of Statistics, Singapore which contains data on Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling in June 2022. Through the use of the age-sex pyramid method, this visualisation seeks to reveal insights on the demographic structure of Singapore at the planning area level.\nThe final analytical visualisation output has been published on Tableau Public."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#populous-estates",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#populous-estates",
    "title": "Take-home Exercise 1",
    "section": "Populous Estates",
    "text": "Populous Estates\nThe age-sex pyramid is able to visually depict which planning areas are the most populous estates at the total population level. Organising this into a Trellis plot enables further contrasting between the selected planning areas, with the length of the bars depicting Bedok (279k), Sengkang (253k) and Hougang (228k) as estates with the highest population, while Bukit Timah (79k) and Queenstown (97k) are less densely populated."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#ageing-population-vs-younger-population",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#ageing-population-vs-younger-population",
    "title": "Take-home Exercise 1",
    "section": "Ageing Population vs Younger Population",
    "text": "Ageing Population vs Younger Population\nThe age-sex pyramid is also able to derive insights on the age composition within a given planning area. For instance, comparing the range where the bar chart peaks between Punggol and Queenstown, it is evident that residents in Punggol mostly belong to the younger age group, while residents in Queenstown are generally older in age."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#family-with-kids-vs-families-with-no-kids",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#family-with-kids-vs-families-with-no-kids",
    "title": "Take-home Exercise 1",
    "section": "Family with kids vs Families with no kids",
    "text": "Family with kids vs Families with no kids\nThe distribution of the bar chart allows us to infer the age range of family nucleuses within the planning areas. For example, the charts displayed below exhibits a bimodal distribution.\nThe first peak is symmetrical between both genders and can be indicative of the age range of parents. The age range of parents that resides in Punggol and Sengkang are broadly similar (i.e., 30 to 45 years old), while parents in Pasir Ris are older (i.e., 50+ years old).\nThe sequence of the next peak in the chart is broadly consistent across all 3 charts, wherein the age difference between the 2 peaks is around +/- 30 years - suggestive that the second peak is the children of parents (i.e., less than 10 years old). This pattern allows us to differentiate the mature estates like Pasir Ris, where the age range of parents and their children are older, against the newer estates like Sengkang and Punggol, where parents and their children are younger in age.\n\n\n\n\n\nIn contrast, the distribution of residents in Queenstown does not exhibit an obvious peak, with a somewhat moderate bell-shaped distribution. This implies that in comparison to other estates, residents residing in Queenstown are more likely to have no kids."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#gender-imbalances",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#gender-imbalances",
    "title": "Take-home Exercise 1",
    "section": "Gender imbalances",
    "text": "Gender imbalances\nThe age-sex pyramid allows us to visually contrast and pick out non-symmetrical patterns relating to gender imbalances. This is particularly noticeable in the older age groups. For instance, in the older estates such as Ang Mo Kio, Bedok and Queenstown, there is a greater contrasting effect between females and males. This is consistent with the general understanding that females have a longer lifespan than males."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#loading-of-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#loading-of-data",
    "title": "Take-home Exercise 1",
    "section": "Loading of Data",
    "text": "Loading of Data\nLoad the data based on dataset respopagesextod2022.csv downloaded from SingStat in Tableau and rename the dataset to “SG Residents Data (June 2022)” for clarity."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#setting-up-the-bar-chart",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#setting-up-the-bar-chart",
    "title": "Take-home Exercise 1",
    "section": "Setting Up the Bar Chart",
    "text": "Setting Up the Bar Chart\n\nClick on the new worksheet tab. From Dimensions, drag AG to the Rows shelf. This will define the Y-axis of the bar chart.\n\n\n\n\n\n\n\nRight click on the AG field under the Rows shelf, click on Edit Aliases and update the Alias values to a more readable format.\n\n\n\n\n\n\n\nRight click on the AG field under the Rows shelf and select Sort descending.\n\n\n\n\n\n\n\nCreate a calculated field labelled ‘Female Population’ that returns the Population value if the gender is female.\n\n\n\n\n\n\n\nFrom Measures, drag the newly created Female Population calculated field to the Columns shelf to create a bar chart that represents the female population. From the Marks card for Female Population, click on Colour and change the color of the bars to pink.\n\n\n\n\n\n\n\nCreate a calculated field labelled ‘Male Population’ that returns the Population value if the gender is male.\n\n\n\n\n\n\n\nFrom Measures, drag the newly created Male Population calculated field to the Columns shelf to create a bar chart that represents the male population. From the Marks card for Male Population, click on Colour and change the color of the bars to blue.\n\n\n\n\n\n\n\nRight-click on the X-axis for the Female Population, and select Edit Axis. Under Scale, select Reversed."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#creating-the-trellis-chart-display",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#creating-the-trellis-chart-display",
    "title": "Take-home Exercise 1",
    "section": "Creating the Trellis Chart Display",
    "text": "Creating the Trellis Chart Display\n\n9 Planning Areas have been selected for the purpose of this exercise. Create 2 new calculated fields to index the Planning Area by columns and rows. The expected output should be reflected in this order:\n\n\n\n\nRow / Col #\n1\n2\n3\n\n\n\n\n1\nAng Mo Kio\nBedok\nBukit Timah\n\n\n2\nChoa Chu Kang\nHougang\nPasir Ris\n\n\n3\nPunggol\nQueenstown\nSeng Kang\n\n\n\n \n\nDrag the newly created Columns and Rows calculated fields to the first field of the respective Columns / Rows shelf. This will index the charts as defined in the calculated fields.\n\n\n\n\n\n\n\nFilter out uninterested Planning Area entries by adding the Rows and Columns fields to the Filters shelf. Exclude all null values to filter of Planning Areas which have not previously been defined in the Rows / Columns calculated fields.\n\n \n\nRight click on the Columns values and uncheck Show Header to remove the Column header values. Do the same for the Row header values as well.\n\n\n\n\n\n\n\n\n\n\n\n\nRight click on the AG row header and select Hide Field Labels for Rows to remove the AG field header display.\n\n\n\n\n\n\n\nDrag the PA field into the Label for Male Marks card. Click on Label, under Marks to Label, ensure that the parameters as displayed in the screenshot have been set. Manually drag the labels to the top right hand corner of each of the 9 bar charts.\n\n\n\n\n\n\n\n\n\n\n\n\nDrag the Sex field into the Color for All Marks card. Click on Colors button and select Edit Colors to select the desired colours. Rename and reformat the Sex field to Gender.\n\n \n\nCreate a FIXED level of detail (LOD) calculated field called Sum Pop to fix the calculation of sum(Pop) by PA. This will enable the field to fix the total population sum by planning areas for the purpose of the tooltip display.\n\n\n\n\n\n\n\nTo set the tooltip display, under the All population marks card, drag Sum Pop into Tooltip and set the formatting parameters as displayed in the screenshot below. Under the Female Population Marks card, drag PA and Female into Tooltip and set the formatting parameters as displayed in the screenshot below. Do the same for Male Population as well."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#creating-the-dashboard",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#creating-the-dashboard",
    "title": "Take-home Exercise 1",
    "section": "Creating the Dashboard",
    "text": "Creating the Dashboard\n\nClick on the new dashboard tab. Under size, select Automatic.\n\n\n\n\n\n\n\nDrag the created worksheet to the dashboard space. Using the Text object, ensure that the Tiled format is selected before dragging the object to the top-most layer of the dashboard. Input the dashboard title header and format the text size, font and colour accordingly. \n\n\n\n\n\n\n\nDrag and drop the image object to the top-right corner of the dashboard. The image should be saved on your desktop before specifying the path to upload the image to. Check Fit image.\n\n \n\nSelect the Gender container and drop to the top-right corner of the dashboard.\n\n\n\n\n\n\n\nResize the respective Containers where relevant to produce the final output."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "Take-home Exercise 2 is done by selecting a Take-home Exercise 1 submission prepared by a fellow classmate. The peer submission will be critiqued in terms of clarity and aesthetics. I will also remake the original design by proposing an alternative design using the data visualization principles and best practices learnt in Lesson 1 and 2\n\n                   \n\n\n\nGrouping the age groups into buckets within a +/- 15 to 20 year range (e.g., young dependents, young work group, prime work group, etc.) results in loss of important details on the distribution shape. This also goes against the essence of the age sex pyramid, which is intended to graphically represent the distribution of a population by age and sex.\nThe age-sex pyramid is also intended to be depicted in the form of a pyramid, where the age group should be sorted in descending order (i.e., oldest age group on top). Inverting the age group order may not be intuitive for users if they see the apex starting from the bottom.\nTransforming the values into percentages without displaying the absolute population numbers makes the chart confusing and misleading as users are not able to compare the population differences between the planning areas. In the selected chart, population sizes across all planning look visually similar, which is not really the case in numerical terms.\nThe title is labelled as “Proportion of Females and Males by Age Groups for 9 most populous Planning Areas in the Central Area - June 2022”. This may be misleading for users as the definition, scope and methodology of how the 9 Central Areas were selected, or what is defined as a “Central Area” lacks clarity.\n\n\n\n\n\nThe colours chosen for the chart was mildly confusing as it does not show the separation between Males and Females.\nThe percentage labels that were included at the end of the bars make the chart appear quite cluttered; additional supplementary details should be included in the tooltip instead, as the main focus of the display should be in the distribution.\nGood display of data source credits.\nFonts selected were easy to read, with clear labeling of Planning Areas"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#proposed-design",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#proposed-design",
    "title": "Take-home Exercise 2",
    "section": "2.1. Proposed Design",
    "text": "2.1. Proposed Design\nThis proposed design of the visualization remake is intended to retain ideas from the original visualization, whilst incorporating best practices to showcase interesting insights from the population areas.\n\nDynamic filter has been added to filter for the top 9 most populous planning areas instead.\nAge Group has been cleaned and original grouping has been retained to preserve the population distribution granularity as much as possible.\nLabels have been removed to avoid unnecessary clutter.\nPreserved and enhanced clear labeling of the Planning Area plot labels.\nAdded Colour coding and legends to clearly indicate the distribution segregation between females and males.\nThe population scale axis (x-axis) has been rounded to per thousands instead. The actual population number has also been set up to display as a tooltip on hover instead. This would reduce the numeric clutter in the chart, whilst preserving important information for the user.\nThe data source credit has been retained."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#remake-of-original-visualization-using-r",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#remake-of-original-visualization-using-r",
    "title": "Take-home Exercise 2",
    "section": "2.2. Remake of Original Visualization using R",
    "text": "2.2. Remake of Original Visualization using R\n\nInstalling and launching R packages\n\npacman::p_load(tidyverse, dplyr, ggplot2, ggthemes, ggiraph) \n\n\n\nImporting the data\n\nrespop_data <- read_csv(\"data/respopagesextod2022.csv\")\n\n\n\nPreparing the data\n\nCleaning of Age Group Values\nRefer to annotations made within the code for specific description\n\nrespop_data <- respop_data %>%\n  mutate(AG = case_when(\n    AG %in% \"90_and_over\" ~ \"90 and over\",\n    AG %in% \"85_to_89\" ~ \"85 - 89\",\n    AG %in% \"80_to_84\" ~ \"80 - 84\",\n    AG %in% \"75_to_79\" ~ \"75 - 79\",\n    AG %in% \"70_to_74\" ~ \"70 - 74\",\n    AG %in% \"65_to_69\" ~ \"65 - 69\",\n    AG %in% \"60_to_64\" ~ \"60 - 64\",\n    AG %in% \"55_to_59\" ~ \"55 - 59\",\n    AG %in% \"50_to_54\" ~ \"50 - 54\",\n    AG %in% \"45_to_49\" ~ \"45 - 49\",\n    AG %in% \"40_to_44\" ~ \"40 - 44\",\n    AG %in% \"35_to_39\" ~ \"35 - 39\",\n    AG %in% \"30_to_34\" ~ \"30 - 34\",\n    AG %in% \"25_to_29\" ~ \"25 - 29\",\n    AG %in% \"20_to_24\" ~ \"20 - 24\",\n    AG %in% \"15_to_19\" ~ \"15 - 19\",\n    AG %in% \"10_to_14\" ~ \"10 - 14\",\n    #<< Labelling single digits to start with '0' preserves the sorting integrity without requiring a separate code to specifically sort the age groups\n    AG %in% \"5_to_9\" ~ \"05 - 09\",   \n    AG %in% \"0_to_4\" ~ \"00 - 04\"))\n\n\n\nDeriving Top 9 Planning Areas by Population\nRefer to annotations made within the code for specific description\n\n#<< Derive Top 9 highest Pop by PA\ntop9pa <- respop_data %>%\n  select(PA, Pop) %>%               #<< Select PA and Pop columns\n  group_by(PA)  %>%                 #<< Group by PA, sum Pop into sum_Pop column\n  summarise(sum_Pop=sum(Pop),\n            .groups = 'drop') %>%\n  arrange(desc(sum_Pop)) %>%        #<< Sort PA by sum_Pop in descending order\n  slice(0:9)                        #<< Only retain top 9 PA\n\n#<< Inner join back to main dataset to get full data only for the Top 9 PA\nrespop_filtered <- inner_join(respop_data, \n                              top9pa,\n                              by = c(\"PA\" = \"PA\"))\n\n#<< Aggregate Top 9 Population by PA, AG, Sex\ndd <- respop_filtered %>%\n  select(PA, AG, Sex, Pop) %>%              \n  group_by(PA, AG, Sex)  %>%                \n  summarise(sum_Pop=sum(Pop),\n            .groups = 'drop')\n\n\n\n\nCreating Age-Sex Pyramid\nRefer to annotations made within the code for specific description\n\np <- ggplot(data = dd, aes(x = AG, fill = Sex)) +\n      #<< First Bar Interactive Chart to filter for data where Sex = Males, display y-axis by population in thousands, display Population # in tooltip\n      geom_col_interactive(data = subset(dd, Sex == \"Males\"), aes(y = sum_Pop/1000, tooltip = sum_Pop)) + \n      #<< Second Bar Chart to filter for data where Sex = Females, display y-axis by population in thousands. *-1 inverts the axis, display Population # in tooltip\n      geom_col_interactive(data = subset(dd, Sex == \"Females\"), aes(y=sum_Pop/1000 * (-1), tooltip = sum_Pop) ) +\n      #<< Flip the coordinates so that AG is at the Y-axis\n      coord_flip() +  \n      #<< Split chart by PA, with 3 rows - there are 9 PAs, so this will appear as a 3x3\n      facet_wrap(~ PA, , nrow=3) +\n      #<< Convert initial y-axis labels (i.e., Pop) into absolute terms to remove the '-' sign\n      scale_y_continuous(labels = abs) +\n      #<< Apply economist theme - white background for simplicity, horizontal gridlines only for easy trace-ability to AG axis marks\n      theme_economist_white(gray_bg=FALSE) + scale_color_economist() +\n      #<< Formatting of axis fonts, axis ticks, axis lines\n      #<< Further expanding line margins to reduce clutter of title / subtitle positioning\n      theme(axis.text = element_text(colour = \"gray60\", size = 8),\n            axis.ticks.x = element_line(colour = \"gray60\"),\n            axis.line.x = element_blank(),\n            plot.title = element_text(size = 20, face = \"bold\",hjust = 0.5),\n            axis.title.x = element_text(margin = margin(t = 10), colour = \"gray60\"),\n            axis.title.y = element_text(margin = margin(r = 10), colour = \"gray60\"),\n            plot.subtitle = element_text(margin=margin(5,0,5,0))\n            ) +\n      #<< add Header title, Axis titles, sub titles\n      ggtitle(\"Distribution of Sex by Age Group for 9 most populous areas - June 2022\") +\n      labs(y = \"Population (per'000) \", x = \"Age Group\", size = 15) + \n      labs(subtitle = \"Data Source: Department of Statistics, Singapore\")\n\n#<< run interactive ggirafe\ngirafe(\n  ggobj = p,\n  width_svg = 10,\n  height_svg = 10\n)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "Take-home Exercise 3 will seek to uncover the salient patterns of the resale prices of public housing property by residential towns and estates in Singapore by using appropriate analytical visualisation techniques learned in Lesson 4: Fundamentals of Visual Analytics. The dataset selected for this exercise is sourced from Data.gov.sg and contains data on the Resale Flat Prices based on Registration Date from Jan 2017 onwards.\nFor the purpose of this study, only 3-ROOM, 4-ROOM and 5-ROOM flat types will be used for analysis. The study period is conducted based on transactions recorded in 2022."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#analytical-visualization-1---box-violin-plot",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#analytical-visualization-1---box-violin-plot",
    "title": "Take Home Exercise 3",
    "section": "Analytical Visualization #1 - Box Violin Plot",
    "text": "Analytical Visualization #1 - Box Violin Plot\n\nSelection and Design Considerations\nThis visualization uses the ggbetweenstats() method in the ggstatsplot package to conduct a One-way ANOVA test on Resale Prices by Flat Type.\n• A combination of box and violin plots along with jittered data points for between-flat type designs is used – side-by-side display of plots is able to give the user an immediate visual comparison of the differences in resale prices across flat types.\n• Statistical details included in the plot as a subtitle gives the user quantitative validation of the One-way ANOVA test outcomes.\n• Y-axis Resale prices has been rounded to thousands to facilitate the user’s ease of reading.\n• Outlier label is turned on to identify the towns where outlier prices have been recorded.\n\n\nReproducible Description Data Viz Prep\nThe code chunk below contains the codes required to reproduce this visualization, along with the corresponding annotations which describes the procedures used.\n\nset.seed(123)\n\nresale_filtered1 <- resale_filtered %>% \n  select(resale_price, town, flat_type) %>%\n  mutate(resale_price = resale_price/1000)\n\nggbetweenstats(\n  data                 = resale_filtered1,                                              #<< dataframe\n  x                    = flat_type,                                                     #<< grouping / independent variable\n  y                    = resale_price,                                                  #<< dependent variables\n  xlab                 = \"Resale Price (in S$'000)\",                                    #<< label for the x-axis\n  ylab                 = \"Flat Type\",                                                   #<< label for the y-axis\n  title                = \"Comparison of Resale Price (in S$'000) by Flat Type (2022)\",  #<< Plot Title\n  caption              = \"Source: Data.gov.sg\",                                         #<< Caption\n  type                 = \"p\",                                                           #<< type of statistical test: parametric\n  mean.plotting        = TRUE,                                                          #<< whether the mean is to be displayed\n  outlier.tagging      = TRUE,                                                          #<< whether outliers should be flagged\n  outlier.coef         = 3,                                                             #<< outlier coeff - configured to display extreme outliers\n  outlier.label        = town,                                                          #<< label to attach to outlier values\n  outlier.label.color  = \"red\",                                                         #<< outlier point label color\n  messages             = FALSE                                                          #<< turn off messages\n) \n\n\n\n\n\n\nInsights Revealed by Data Viz\nResale prices are currently over-valued across all flat types.\nFrom the plot, we are able to see that the distribution is positively skewed across all 3 flat types, where the mean > median. This means that the data constitutes a higher frequency of high valued resale transaction prices.\n4-Room and 5-Room Flats are more over-valued\nThe mean, identified by the red dot in the plot, appears to be further away for 4-Room and 5-Room flats vs 3-Room flat, which implies the higher price premium imposed on the demand for bigger houses.\nResale prices across flat types is statistically different\nGiven that the p-value is smaller than the alpha level, the null hypothesis is rejected and we can statistically validate that there are indeed differences in the resale prices across flat types.\nPricing in of location premium\nLooking that the extreme outlier labels displayed in the plot, we can also see how the location premium effect is priced into the resale transaction prices. For example, a 4 Room HDB flat in the central area can cost more than most 5 Room HDB flats."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#analytical-visualization-2---dot-plot",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#analytical-visualization-2---dot-plot",
    "title": "Take Home Exercise 3",
    "section": "Analytical Visualization #2 - Dot Plot",
    "text": "Analytical Visualization #2 - Dot Plot\n\nSelection and Design Considerations\nThis visualization uses the ggdotplotstats() method in the ggstatsplot package to conduct a Bootstrap-t method for one-sample test. The output is visualized in a dot plot using the Cleveland dot plot.\n• Displaying in a dot plot makes the labels easier to read, as the towns are sorted in percentile terms, thereby reducing graph clutter.\n• The mean labels are clearly defined, allowing the user a basis to easily identify overvalued/undervalued towns relative to the mean.\n• Plots displayed side-by-side allows the user a visual comparison of the transacted prices relative to the transaction count across towns.\n• Statistical details included in the plot as a subtitle gives the user quantitative validation of the one-sample test outcomes.\n\n\nReproducible Description Data Viz Prep\nThe code chunk below contains the codes required to reproduce this visualization, along with the corresponding annotations which describes the procedures used.\n\n#<< selecting relevant fields for plot and rounding resale price to thousands\nresale_filtered2 <- resale_filtered %>% \n  select(resale_price, town, flat_type, No_of_txn) %>% \n  mutate(resale_price = resale_price/1000) %>% \n  distinct()\n\n#<< derive average txn prices and txn count by towns\nresale_filtered3 <- resale_filtered %>%\n  select(resale_price, town, flat_type, No_of_txn) %>%             \n  group_by(town)  %>%                \n  summarise(avg_Px=mean(resale_price),\n            avg_Txn_Count=mean(No_of_txn),\n            .groups = 'drop')  %>%\n  mutate(avg_Px = avg_Px/1000) \n\n\nset.seed(123)\n\np1 <- ggdotplotstats(\n            data         = resale_filtered2,                                              #<< transformed dataset\n            y            = town,                                                          #<< selecting y-axis (i.e., town)\n            x            = resale_price,                                                  #<< selecting x-axis (i.e., resale price)\n            type         = \"robust\",                                                      #<< selecting statistical approach (Bootstrap-t method for one-sample test)\n            title        = \"Mean Resale Prices of 3/4/5 Rm HDB by Towns\",                 #<< Plot title\n            xlab         = \"Resale Price (in S$'000)\",                                    #<< x-axis label\n            caption      = \"Source: Data.gov.sg\",                                         #<< Caption\n            ggtheme      = theme_economist()                                              #<< setting theme of plot\n\n)\n\np2 <- ggdotplotstats(\n            data         = resale_filtered2,                                              #<< transformed dataset\n            y            = town,                                                          #<< selecting y-axis (i.e., town)\n            x            = No_of_txn,                                                     #<< selecting x-axis (i.e., no. of txn)\n            type         = \"robust\",                                                      #<< selecting statistical approach (Bootstrap-t method for one-sample test)\n            title        = \"No. of 3/4/5 Rm HDB Transactions by Towns\",                   #<< Plot title\n            xlab         = \"Transaction Count\",                                           #<< x-axis label\n            caption      = \"Source: Data.gov.sg\",                                         #<< Caption\n            ggtheme      = theme_economist()                                              #<< setting theme of plot\n) \n\np3 <- ggscatterstats(\n            data         = resale_filtered3,                                              #<< transformed dataset\n            y            = avg_Px,                                                        #<< selecting y-axis (i.e., avg_Px)\n            x            = avg_Txn_Count,                                                 #<< selecting x-axis (i.e., avg_Txn_Count)\n            xlab         = \"Average Transaction Count\",                                   #<< x-axis label\n            ylab         = \"Resale Price (in S$'000)\",                                    #<< y-axis label\n            marginal = FALSE,\n            ggtheme      = theme_economist()                                              #<< setting theme of plot\n)\n\n\n(p1+p2)/p3\n\n\n\n\n\n\nInsights Revealed by Data Viz\nTowns with the highest location premium\nThe plot is able to clearly display towns with the highest location premium – Central Area, Bishan, Queenstown, Bukit Merah, etc.\nTowns with higher demand\nThe plot is able to clearly display towns with higher demands (proxied by the number of transactions recorded within the towns in 2022) – Seng Kang, Punggol, Yishun, Woodlands, etc.\nExpected Resale Prices to Pay\nFrom the confidence internal, we are 95% confident that a given resale transaction price will fall between the range of $538k and $610k.\nMedium Correlation between resale prices and transaction count\nThe degree of correlation Pearson’s Correlation Coefficient is -0.43, which indicates the correlation between resale prices and transaction count to be at a medium level. This is also observed in the plot where the reference line appears to be slightly tilted downwards."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#analytical-visualization-3---scatter-plot",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#analytical-visualization-3---scatter-plot",
    "title": "Take Home Exercise 3",
    "section": "Analytical Visualization #3 - Scatter Plot",
    "text": "Analytical Visualization #3 - Scatter Plot\n\nSelection and Design Considerations\nThis visualization uses the ggscatterstats() method in the ggstatsplot package to evaluate the association between storey level (i.e., floor level of HDB unit) and resale prices.\n• A scatterplot is used to depict the relationship between the 2 selected variables.\n• A reference line, along with 95% CI cone has been included, which allows the user to visually identify the linear direction of the relationship.\n• Statistical details have also been included in the plot itself.\n• Distribution plots that depict the distribution of the individual attributes are also available to complement the main scatterplot.\n\n\nReproducible Description Data Viz Prep\nThe code chunk below contains the codes required to reproduce this visualization, along with the corresponding annotations which describes the procedures used.\n\n#<< selecting relevant fields for plot and deriving average txn prices by towns\nresale_filtered4 <- resale_filtered %>%\n  select(resale_price, storey_mean, flat_type) %>%             \n  group_by(storey_mean, flat_type)  %>%                \n  summarise(avg_Px=mean(resale_price),\n            .groups = 'drop')  %>%\n  mutate(avg_Px = avg_Px/1000) \n\nset.seed(123)\n\nggscatterstats(\n          data             = resale_filtered4,                                              #<< transformed dataset\n          x                = avg_Px,                                                        #<< selecting x-axis (i.e., avg_Px)\n          y                = storey_mean,                                                   #<< selecting y-axis (i.e., storey mean)\n          ggtheme          = theme_grey(),                                                  #<< setting theme of plot\n          xlab             = \"Resale Price (in S$'000)\",                                    #<< x-axis label\n          ylab             = \"Storey Level\",                                                #<< x-axis label\n          title            = \"Mean Resale Prices of 3 / 4 / 5 Room HDB by Storey Level\"     #<< Plot title\n)\n\n\n\n\n\n\nInsights Revealed by Data Viz\nHigh Positive Association between Storey Level and Resale Prices\nFrom the plot, it can be visually noted that the reference line appears to be clearly directed upwards. Complementing this observation with statistical metrics generated from Pearson’s correlation test (r = 0.82) revealed that, across all towns and flat types, the storey height was positively correlated with resale prices. The p-value (p < 0.05) was also confirmed the statistical details to be statistically significant.\nStorey Level Premium Priced In\nThis is indicative that a storey level premium is also another factor priced into the HDB resale transaction prices (i.e., the higher the storey level of the HDB, the higher the resale transaction price is likely to be)."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#analytical-visualization-4---multiple-linear-regression",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#analytical-visualization-4---multiple-linear-regression",
    "title": "Take Home Exercise 3",
    "section": "Analytical Visualization #4 - Multiple Linear Regression",
    "text": "Analytical Visualization #4 - Multiple Linear Regression\n\nSelection and Design Considerations\nThe Multiple Linear Regression model has been selected because of its simplicity and its performance, allowing us to easily understand how each variable affects the resale price. Several model diagnostic checks from the performance package have also been conducted and visualized. Finally, ggcoefstats() of ggstatsplot package is used to visualise the parameters of the regression model.\n• Visualizing collinearity – plotting highly correlated variables using the check_collinearity() function allow the user to easily identify variables which may suffer from multi-collinearity, for the purposes of calibrating the model.\n• The other model diagnostic checks have also been ran as a form of sanity check prior to building the finalized regression model.\n• The regression model output is visualised using a dot-and-whisker plot, which allows the user to visually identify how each variable impacts the resale prices, along with other statistical details to complement.\n\n\nReproducible Description Data Viz Prep\nThe code chunk below contains the codes required to reproduce this visualization, along with the corresponding annotations which describes the procedures used.\nModel Diagnostic: Multi-Collinearity Check\n\n#<< lm() function used from Base Stats of R\n#<< all attributes selected in first model version\n\nmodel <- lm(resale_price ~ flat_type + floor_area_sqm + lease_commence_date + \n              remaining_lease + storey_mean + SD_Resale_Px + Mean_Resale_Px + No_of_txn,\n            data = resale_filtered)\n\n#<< running of collinearity check\n\ncheck_collinearity(model) %>% plot()\n\n\n\n\nNew Model Diagnostic: Complete check\n\n#<<dropped flat_type and lease_commence_date attributes\nmodel1 <- lm(resale_price ~ #<<flat_type + \n              floor_area_sqm + #<<lease_commence_date + \n               remaining_lease + storey_mean + SD_Resale_Px + Mean_Resale_Px + No_of_txn,\n            data = resale_filtered)\n\n#<< running of model diagnostic checks\ncheck_model(model1)\n\n\n\n\nVisualizing Regression Model\n\nggcoefstats(model1, \n            output = \"plot\")\n\n\n\n\n\n\n\n\n\n\nInsights Revealed by Data Viz\nRemoval of variables with high collinearity\nFlat type and lease commencement date were identified to be variables with high collinearity, which may distort the model performance. As such, these were removed in the re-calibrated model.\nSignificant Attributes Contributing to the model\nThe remaining attributes are validated to be statistically significant (p-value < 0.05): floor_area_sqm, remaining_lease, storey_mean, SD_Resale_Px, Mean_Resale_Px, No_of_txn. The remaining lease and floor level of HDB unit appears to be top variables in determining the HDB resale prices. For instance, for every 1 year increase in remaining lease of the property, the resale price is expected to increase by ~$3698, while for every 1 level increase in floor level, the resale price is expected to increase by ~$4967.\nLow AIC and BIC\nThe low AIC and BIC values are indicative of a good overall model fit."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html",
    "title": "Take Home Exercise 04",
    "section": "",
    "text": "1. Introduction\nThis Take-Home Exercise seeks to uncover the impact of COVID-19 as well as the global economic and political dynamic in 2022 on Singapore’s bi-lateral trade (i.e. Import, Export and Trade Balance) by using appropriate analytical visualisation techniques learned in Lesson 6: It’s About Time.\nThe dataset selected for this exercise is sourced from Singstat.gov.sg and contains data on the Merchandise Imports and Exports by Region / Market.\nFor the purpose of this exercise, the study period will be conducted from January 2020 to December 2022.\n\n\n2. Data Visualization\n\nInstalling and Loading R Packages\n\npacman::p_load(readxl, dplyr, tidyverse, lubridate, knitr) \n\n\n\nImporting Data\n\nimport_data <- read_xlsx(\"data/outputFile.xlsx\",\n                         sheet = \"T1\",                    #<< select sheet T2\n                         range = \"A10:UT129\",             #<< only read specified cell range \n                         na = \"na\")                       #<< treat na as missing values\n\nexport_data <- read_xlsx(\"data/outputFile.xlsx\",\n                         sheet = \"T2\",                    #<< select sheet T2\n                         range = \"A10:UT101\",             #<< only read specified cell range\n                         na = \"na\")                       #<< treat na as missing values\n\n\n\nData Preparation / Data Output\n\nImport DatasetExport Dataset\n\n\n\n#<< remove spaces in column names\ncolnames(import_data) <- gsub(\" \", \"\", colnames(import_data), fixed = TRUE)\n\nimport <- import_data %>%\n  pivot_longer(                                                       #<< pivot longer to convert columns to rows with values as new numeric values column\n     cols = `2023Jan`:`1976Jan`, \n     names_to = \"date\",\n     values_transform = as.numeric,\n     values_to = \"value\") %>%\n  pivot_wider(                                                        #<< pivot wider to convert dataseries column to columns\n    names_from = DataSeries,\n    values_from = value\n  ) %>%\n  mutate(date = ym(date)) %>%                                         #<< convert values to date\n  mutate_at(vars(contains('Thousand Dollars')), ~ (. *1000)) %>%      #<< if column contains THOUSAND, multiply values by 1000\n  mutate_at(vars(contains('Million Dollars')), ~ (. *1000000)) %>%    #<< if column contains THOUSAND, multiply values by 1000000\n  filter(between(date, as.Date('2020-01-01'), as.Date('2022-12-01'))) #<< filter for date range Jan20 - Dec22\n\n#<< remove thousand dollar string from column name\ncolnames(import) <- gsub(\" (Thousand Dollars)\", \"\", colnames(import), fixed = TRUE)\n\n#<< remove million dollar string from column name            \ncolnames(import) <- gsub(\" (Million Dollars)\", \"\", colnames(import), fixed = TRUE)  \n\n#<< remove symbols from column names\ncolnames(import) <- str_replace_all(colnames(import), \"[^[:alnum:]]\", \"\")\n\nkable(head(import))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndate\nTotalMerchandiseImports\nAmerica\nAsia\nEurope\nOceania\nAfrica\nEuropeanUnion\nBelgium\nDenmark\nFrance\nGermanyFederalRepublicOf\nGreece\nIreland\nItaly\nLuxembourg\nNetherlands\nUnitedKingdom\nPortugal\nSpain\nAustria\nFinland\nNorway\nSweden\nSwitzerland\nLiechtenstein\nMalta\nGermanyDemocraticRepublicOf\nHungary\nPoland\nEstonia\nLatvia\nLithuania\nSlovenia\nCzechRepublic\nSlovakRepublicSlovakia\nBruneiDarussalam\nIndonesia\nMalaysia\nPhilippines\nThailand\nMyanmar\nCambodia\nLaosPeoplesDemocraticRepublic\nVietnamSocialistRepublicOf\nJapan\nHongKong\nRepublicOfKorea\nTaiwan\nMacau\nMainlandChina\nAfghanistan\nBangladesh\nIndia\nMaldivesRepublicOf\nNepal\nPakistan\nSriLanka\nBahrain\nCyprus\nIranIslamicRepublicOf\nIsrael\nJordan\nKuwait\nLebanon\nOman\nQatar\nSaudiArabia\nSyrianArabRepublic\nUnitedArabEmirates\nYemen\nYemenDemocratic\nCanada\nPuertoRico\nUnitedStates\nArgentina\nBrazil\nChile\nColombia\nEcuador\nMexico\nParaguay\nPeru\nUruguay\nVenezuela\nNetherlandsAntilles\nPanama\nBahamas\nBermuda\nFrenchGuiana\nGrenada\nGuatemala\nHonduras\nJamaica\nStVincentTheGrenadines\nTrinidadTobago\nAnguilla\nOtherCountriesInAmerica\nAustralia\nFiji\nNauru\nNewCaledonia\nNewZealand\nPapuaNewGuinea\nCocosKeelingIslands\nFrenchSouthernTerritories\nNorfolkIsland\nCookIslands\nFrenchPolynesia\nGuam\nKiribati\nNiue\nSolomonIslands\nTuvalu\nWallisFatunaIslands\nMicronesia\nPalau\nSouthSudan\nOtherCountriesInOceania\nCommonwealthOfIndependentStates\n\n\n\n\n2022-12-01\n49869770000\n6901500000\n33611700000\n7541800000\n1399900000\n414900000\n5058800000\n103655000\n67665000\n1537347000\n1129542000\n99085000\n106678000\n702472000\n8156000\n384010000\n940088000\n31026000\n262629000\n104665000\n42399000\n50581000\n162253000\n992687000\n2250000\n41040000\n0\n44406000\n61324000\n5378000\n4288000\n13594000\n7106000\n69549000\n9115000\n143124000\n2074781000\n6017970000\n592778000\n1116398000\n7486000\n25899000\n7281000\n567388000\n2618288000\n240017000\n3207322000\n5357878000\n1376000\n7642587000\n61000\n27270000\n834657000\n103000\n221000\n7334000\n10737000\n44949000\n21698000\n317000\n98717000\n8265000\n639000\n332000\n72624000\n640131000\n801168000\n0\n1212293000\n629000\n0\n211232000\n8375000\n5314219000\n11273000\n1004171000\n16649000\n7915000\n4475000\n277739000\n681000\n3464000\n635000\n89000\n0\n127000\n11000\n0\n123000\n6000\n570000\n1457000\n93000\n0\n64000\n0\n37931000\n1253373000\n243000\n14000\n18000\n122266000\n23124000\n2000\n46000\n1000\n0\n210000\n35000\n0\n80000\n3000\n0\n0\n29000\n1000\n33107000\n1577000\n559381000\n\n\n2022-11-01\n50653907000\n7529400000\n34733700000\n7242800000\n664400000\n483600000\n4961400000\n121773000\n67436000\n1563127000\n1107630000\n37937000\n118525000\n725004000\n5714000\n301384000\n1050419000\n33086000\n245875000\n105084000\n49148000\n43134000\n196484000\n949410000\n3686000\n23080000\n0\n46849000\n59504000\n6972000\n6436000\n8716000\n8502000\n77729000\n7487000\n121051000\n1971918000\n6773423000\n581054000\n1241990000\n6044000\n16407000\n4963000\n488956000\n2837697000\n169227000\n2863026000\n5319407000\n17054000\n8285837000\n26000\n25709000\n837673000\n145000\n612000\n10169000\n12169000\n11520000\n2385000\n267000\n85965000\n7262000\n54562000\n578000\n60005000\n476149000\n866619000\n0\n1205738000\n106000\n0\n224872000\n16518000\n5832049000\n6775000\n1132945000\n13831000\n4436000\n2745000\n242881000\n281000\n2155000\n779000\n720000\n0\n116000\n4000\n4000\n517000\n19000\n997000\n838000\n117000\n0\n2854000\n0\n43918000\n577829000\n191000\n0\n256000\n72677000\n12724000\n0\n99000\n0\n0\n35000\n104000\n3000\n0\n13000\n0\n0\n8000\n0\n27952000\n3090000\n355213000\n\n\n2022-10-01\n53182943000\n7666400000\n36120900000\n7475900000\n1329800000\n589900000\n4685200000\n88796000\n63719000\n1493161000\n1122251000\n15850000\n157648000\n594994000\n15746000\n263199000\n859994000\n39971000\n184146000\n101231000\n49749000\n40090000\n180230000\n1811943000\n2650000\n51734000\n0\n42761000\n72936000\n5489000\n2299000\n5892000\n8759000\n78066000\n9522000\n214994000\n1987191000\n6417377000\n646820000\n1431165000\n5856000\n9089000\n16907000\n522441000\n3038903000\n207166000\n3044583000\n6484560000\n2341000\n7377473000\n9000\n18536000\n826855000\n14000\n688000\n6327000\n14721000\n66675000\n2034000\n692000\n93452000\n3020000\n52798000\n449000\n108470000\n528921000\n1010564000\n3000\n1642118000\n265000\n0\n213606000\n5480000\n6163496000\n14908000\n917460000\n11567000\n2200000\n4893000\n272680000\n487000\n11670000\n1123000\n885000\n0\n175000\n4000\n0\n12899000\n1000\n262000\n706000\n61000\n2000\n31000\n1000\n44771000\n1246296000\n170000\n0\n14000\n72719000\n10221000\n2000\n115000\n0\n0\n60000\n65000\n0\n1000\n21000\n1000\n0\n5000\n0\n0\n269000\n211147000\n\n\n2022-09-01\n55799312000\n7995900000\n37696300000\n8167600000\n1544600000\n395000000\n5145800000\n215978000\n61842000\n1660563000\n1170472000\n107888000\n118936000\n547587000\n55482000\n314814000\n1131385000\n47500000\n209987000\n130438000\n48419000\n41524000\n143127000\n1758858000\n3558000\n23836000\n0\n38367000\n82610000\n7789000\n2679000\n8406000\n7816000\n73954000\n7399000\n208537000\n1924895000\n7672003000\n599147000\n1343781000\n6949000\n12607000\n20214000\n594893000\n3109529000\n354257000\n3113799000\n5683947000\n436000\n7390866000\n19000\n18308000\n1023746000\n43000\n602000\n5272000\n13436000\n2744000\n1662000\n258000\n143055000\n8904000\n16848000\n303000\n42137000\n766915000\n954922000\n17000\n2315066000\n48000\n0\n241035000\n9831000\n6537215000\n13163000\n833293000\n29599000\n10518000\n2522000\n263872000\n235000\n14741000\n3311000\n238000\n0\n328000\n4000\n3000\n296000\n3000\n926000\n432000\n493000\n21000\n58000\n0\n35101000\n1447901000\n498000\n8000\n262000\n79919000\n14332000\n0\n242000\n0\n23000\n37000\n176000\n0\n3000\n4000\n0\n0\n10000\n0\n14777000\n664000\n192289000\n\n\n2022-08-01\n58466009000\n8633800000\n40911900000\n7433200000\n935900000\n551200000\n5131000000\n132917000\n126150000\n1624646000\n1135242000\n170197000\n193225000\n592000000\n31284000\n339001000\n753406000\n45507000\n200170000\n105197000\n38114000\n36231000\n107557000\n1420434000\n3380000\n40703000\n0\n39917000\n64268000\n7588000\n3549000\n6345000\n7957000\n76026000\n10549000\n311958000\n2301232000\n7225607000\n1121526000\n1511871000\n8313000\n21829000\n36150000\n688285000\n3100676000\n319470000\n3841813000\n7174679000\n3219000\n8196629000\n107000\n36996000\n908131000\n37000\n559000\n9692000\n12789000\n7085000\n2499000\n255000\n126174000\n3782000\n56351000\n337000\n73156000\n827737000\n1081996000\n0\n1629843000\n151000\n0\n599499000\n14898000\n6575058000\n11801000\n968690000\n75458000\n9806000\n1931000\n247995000\n513000\n1888000\n806000\n803000\n0\n424000\n0\n2000\n431000\n8000\n2170000\n793000\n137000\n0\n80568000\n9000\n40996000\n696980000\n185000\n0\n186000\n133089000\n104656000\n7000\n8000\n101000\n0\n38000\n86000\n0\n0\n2000\n0\n0\n10000\n6000\n0\n441000\n170747000\n\n\n2022-07-01\n61029374000\n7879700000\n43214200000\n8300500000\n1060600000\n574400000\n5233500000\n224676000\n55752000\n1555500000\n1207446000\n207744000\n107148000\n570591000\n9766000\n359653000\n802819000\n46337000\n178600000\n118935000\n91645000\n49789000\n181260000\n1937455000\n3229000\n54619000\n0\n48975000\n57608000\n8844000\n3910000\n3338000\n7600000\n82010000\n10839000\n248815000\n2032018000\n7243882000\n1358580000\n1636787000\n7363000\n27796000\n1707000\n759728000\n3440363000\n624415000\n4382579000\n7306972000\n982000\n8510236000\n82000\n18815000\n1022364000\n21000\n632000\n4988000\n13242000\n165713000\n1199000\n44000\n99014000\n5333000\n117344000\n475000\n71377000\n692186000\n1003667000\n0\n2225339000\n499000\n0\n284927000\n16567000\n6158055000\n10327000\n928891000\n20111000\n1927000\n2226000\n402686000\n423000\n3042000\n5398000\n442000\n0\n131000\n6000\n1000\n359000\n0\n3463000\n780000\n24000\n0\n3033000\n0\n40731000\n924529000\n601000\n0\n25000\n97855000\n21087000\n1000\n4000\n0\n0\n493000\n12160000\n0\n0\n0\n0\n0\n8000\n0\n12000\n2880000\n268726000\n\n\n\n\n\n\n\n\n#<< remove spaces in column names\ncolnames(export_data) <- gsub(\" \", \"\", colnames(export_data), fixed = TRUE)\n\nexport <- export_data %>%\n  pivot_longer(                                                       #<< pivot longer to convert columns to rows with values as new numeric values column\n     cols = `2023Jan`:`1976Jan`, \n     names_to = \"date\",\n     values_transform = as.numeric,\n     values_to = \"value\") %>%\n  pivot_wider(                                                        #<< pivot wider to convert dataseries column to columns\n    names_from = DataSeries,\n    values_from = value\n  ) %>%\n  mutate(date = ym(date)) %>%                                         #<< convert values to date\n  mutate_at(vars(contains('Thousand Dollars')), ~ (. *1000)) %>%      #<< if column contains THOUSAND, multiply values by 1000\n  mutate_at(vars(contains('Million Dollars')), ~ (. *1000000)) %>%    #<< if column contains THOUSAND, multiply values by 1000000\n  filter(between(date, as.Date('2020-01-01'), as.Date('2022-12-01'))) #<< filter for date range Jan20 - Dec22\n\n#<< remove thousand dollar string from column name\ncolnames(export) <- gsub(\" (Thousand Dollars)\", \"\", colnames(export), fixed = TRUE)\n\n#<< remove million dollar string from column name            \ncolnames(export) <- gsub(\" (Million Dollars)\", \"\", colnames(export), fixed = TRUE)  \n\n#<< remove symbols from column names\ncolnames(export) <- str_replace_all(colnames(export), \"[^[:alnum:]]\", \"\")\n\nkable(head(export))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndate\nTotalMerchandiseExports\nAmerica\nAsia\nEurope\nOceania\nAfrica\nEuropeanUnion\nBelgium\nDenmark\nFrance\nGermanyFederalRepublicOf\nGreece\nIreland\nItaly\nLuxembourg\nNetherlands\nUnitedKingdom\nPortugal\nSpain\nAustria\nFinland\nSweden\nSwitzerland\nMalta\nGermanyDemocraticRepublicOf\nHungary\nPoland\nEstonia\nLatvia\nLithuania\nSlovenia\nCzechRepublic\nSlovakRepublicSlovakia\nBruneiDarussalam\nIndonesia\nMalaysia\nPhilippines\nThailand\nMyanmar\nCambodia\nLaosPeoplesDemocraticRepublic\nVietnamSocialistRepublicOf\nJapan\nHongKong\nRepublicOfKorea\nTaiwan\nMacau\nMainlandChina\nAfghanistan\nBangladesh\nIndia\nMaldivesRepublicOf\nNepal\nPakistan\nSriLanka\nBahrain\nCyprus\nIranIslamicRepublicOf\nIsrael\nJordan\nKuwait\nLebanon\nOman\nQatar\nSaudiArabia\nSyrianArabRepublic\nUnitedArabEmirates\nYemen\nYemenDemocratic\nCanada\nPuertoRico\nUnitedStates\nArgentina\nBrazil\nChile\nColombia\nEcuador\nMexico\nParaguay\nPeru\nUruguay\nVenezuela\nAustralia\nFiji\nNewCaledonia\nNewZealand\nPapuaNewGuinea\nFrenchPolynesia\nGuam\nSolomonIslands\nOtherCountriesInOceania\n\n\n\n\n2022-12-01\n55000084000\n6217500000\n39734800000\n4924400000\n3034800000\n1088600000\n4137100000\n432376000\n31084000\n402218000\n809343000\n131220000\n177243000\n128641000\n25910000\n1243341000\n360897000\n123349000\n46151000\n49367000\n71732000\n14099000\n311701000\n243227000\n0\n47775000\n53076000\n683000\n7434000\n1248000\n4546000\n23443000\n1217000\n75900000\n3740306000\n5154779000\n1116549000\n1790423000\n449544000\n195030000\n4643000\n1958783000\n2271626000\n7403998000\n2865718000\n2768573000\n29319000\n6374198000\n214000\n294037000\n1703023000\n27931000\n18692000\n183923000\n134049000\n24163000\n48818000\n510000\n105746000\n15012000\n46086000\n1729000\n18234000\n64520000\n102899000\n260000\n625765000\n566000\n0\n113586000\n4234000\n4671228000\n22119000\n227374000\n8570000\n12036000\n7249000\n224874000\n563000\n11791000\n3822000\n39000\n1711317000\n71371000\n32546000\n397788000\n84412000\n2428000\n41150000\n6018000\n691400000\n\n\n2022-11-01\n54162780000\n6394200000\n37973200000\n5025200000\n3243100000\n1527000000\n4243400000\n756814000\n29250000\n324451000\n927112000\n126740000\n33157000\n167460000\n4663000\n1190952000\n322583000\n74028000\n23462000\n40047000\n19921000\n18936000\n328426000\n245180000\n0\n63588000\n63246000\n1005000\n2792000\n3033000\n6222000\n25261000\n2481000\n65457000\n4082822000\n5557119000\n1118234000\n1762557000\n392738000\n280992000\n2950000\n1568729000\n2504491000\n5302426000\n2165065000\n2667565000\n42902000\n6773005000\n272000\n339772000\n1467219000\n34754000\n12037000\n111265000\n133349000\n21034000\n57791000\n1091000\n122699000\n8410000\n44896000\n2798000\n16674000\n172041000\n106397000\n62000\n901306000\n1322000\n0\n96999000\n56271000\n4787358000\n20687000\n170736000\n8683000\n13459000\n6212000\n277119000\n626000\n8651000\n947000\n482000\n1794035000\n55584000\n15556000\n573747000\n80267000\n17142000\n49396000\n7120000\n650476000\n\n\n2022-10-01\n56576348000\n6653900000\n40500800000\n5121500000\n3114500000\n1185600000\n4298100000\n350565000\n67327000\n529962000\n1035273000\n121392000\n117698000\n155578000\n6334000\n1189965000\n357153000\n81811000\n32247000\n60000000\n65311000\n21361000\n362032000\n220098000\n0\n39889000\n47942000\n1321000\n7758000\n4156000\n5236000\n43738000\n11506000\n67063000\n4075989000\n6233818000\n1229078000\n1965567000\n461908000\n594395000\n7222000\n1730554000\n2406706000\n5137172000\n2330102000\n3034201000\n21959000\n7810503000\n345000\n465380000\n1395949000\n21845000\n13355000\n66674000\n93118000\n121596000\n62302000\n2586000\n78544000\n7316000\n40943000\n1148000\n45914000\n99750000\n242241000\n116000\n573275000\n700000\n0\n110044000\n49109000\n5070780000\n23605000\n202358000\n7161000\n16109000\n6672000\n282600000\n987000\n7898000\n1885000\n676000\n1628700000\n70864000\n38811000\n499540000\n102466000\n34617000\n76617000\n7749000\n658085000\n\n\n2022-09-01\n62507132000\n7091900000\n45605100000\n5155100000\n3453300000\n1201800000\n4065400000\n386724000\n44793000\n358786000\n912066000\n150911000\n61522000\n125791000\n7283000\n1181847000\n379348000\n149219000\n35478000\n60601000\n45266000\n21764000\n579719000\n248160000\n0\n60851000\n53511000\n2292000\n9914000\n2474000\n2679000\n40588000\n11752000\n81269000\n4373980000\n5884698000\n1367212000\n2241114000\n509268000\n1504662000\n27116000\n2375792000\n2481370000\n7405741000\n2896148000\n2875136000\n18310000\n7133642000\n453000\n547112000\n1817817000\n30156000\n15734000\n226902000\n191920000\n41003000\n64638000\n548000\n111282000\n7608000\n42895000\n1082000\n19112000\n95392000\n310368000\n85000\n813202000\n1464000\n0\n134488000\n74606000\n5278523000\n52858000\n274320000\n44538000\n20157000\n11642000\n231403000\n1297000\n10393000\n969000\n64000\n1923247000\n89525000\n29359000\n528450000\n114715000\n2743000\n50413000\n9035000\n708359000\n\n\n2022-08-01\n63363749000\n7931000000\n44106200000\n6109600000\n3608400000\n1608500000\n5020500000\n570824000\n42761000\n454328000\n1291942000\n191678000\n68379000\n126344000\n9801000\n1512800000\n498657000\n100757000\n41036000\n36414000\n30590000\n18788000\n440859000\n229646000\n0\n80433000\n48436000\n2590000\n4005000\n3363000\n2361000\n53328000\n8491000\n101311000\n4684693000\n6150507000\n1654932000\n2254888000\n455447000\n1087906000\n3719000\n2259090000\n2311824000\n6466344000\n2412712000\n2621213000\n26644000\n7548001000\n232000\n534857000\n1593916000\n32331000\n16029000\n132621000\n121017000\n48485000\n70390000\n810000\n138756000\n9380000\n34121000\n1380000\n68168000\n101056000\n119219000\n0\n975155000\n1463000\n0\n131512000\n32665000\n6094432000\n43246000\n258914000\n12651000\n17219000\n10004000\n258392000\n283000\n9050000\n2100000\n136000\n2060828000\n49089000\n39826000\n471479000\n75179000\n4153000\n73882000\n13854000\n823524000\n\n\n2022-07-01\n64124991000\n6731200000\n46129500000\n6250600000\n3916100000\n1097600000\n5497000000\n991586000\n48586000\n459094000\n1279156000\n166037000\n109400000\n120489000\n27007000\n1477881000\n405922000\n141847000\n52271000\n30552000\n50463000\n19968000\n246381000\n243500000\n0\n58378000\n57658000\n1676000\n9284000\n2261000\n6190000\n36867000\n7196000\n107918000\n5333607000\n6672175000\n1430283000\n2197398000\n737588000\n1698433000\n6565000\n2086867000\n2327064000\n6138562000\n2397646000\n3301359000\n16838000\n7792074000\n240000\n555989000\n1637019000\n18970000\n18883000\n313964000\n73049000\n10775000\n68329000\n374000\n153543000\n12002000\n20377000\n1505000\n78456000\n96592000\n131655000\n147000\n586314000\n567000\n0\n98556000\n88272000\n4854897000\n14329000\n215066000\n45894000\n12527000\n6480000\n374213000\n222000\n9116000\n2455000\n261000\n2252228000\n66873000\n53846000\n626090000\n117535000\n22831000\n31277000\n21651000\n728717000\n\n\n\n\n\n\n\n\n\n\nPlotting the Data\n##Retain all countries, pick out nuances\n##consider using horizon graph? for countries ##cycle plot ##slope graphs"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "title": "Hands On Exercise 06",
    "section": "",
    "text": "pacman::p_load(scales, viridis, lubridate, ggthemes, gridExtra, tidyverse, readxl, knitr, data.table)\n\n\n\n\nattacks <- read_csv(\"data/eventlog.csv\")\n\nkable(head(attacks)) #<< to review the structure of the imported data frame\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\n\n\n\n\n#<< writing a function to create weekday and hour fields for calendar heatmap\nmake_hr_wkday <- function(ts, sc, tz) {\n  real_times <- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt <- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n}\n\n#<< create day of the week values\nwkday_levels <- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\n#<< pass in data frame values into the make_hr_wkday function\nattacks <- attacks %>%\n  group_by(tz) %>%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %>% \n  ungroup() %>%            \n  mutate(wkday = factor(            #<< convert wkday and hour fields into a factor so that values will be ordered when plotting\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\n\n\n\n\ngrouped <- attacks %>%                            #<<derive count of attacks\n  count(wkday, hour) %>% \n  ungroup() %>%\n  na.omit()\n\nggplot(grouped,                                   #<< x=hour, y=weekday, fill gradient by counts\n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +                                    #<<make the grids into squares (equal sides)\nscale_fill_gradient(name = \"# of attacks\",         #<< customizing fill gradient (higher = darker)\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\n\n\n\n\n\n\n#<< Defining countries and % of total attacks\nattacks_by_country <- count(\n  attacks, source_country) %>%\n  mutate(percent = percent(n/sum(n))) %>%\n  arrange(desc(n))\n\n#<< Derive top 4 countries\ntop4 <- attacks_by_country$source_country[1:4]\n\n#<< Filter for Top 4 countries in main data set\ntop4_attacks <- attacks %>%\n  filter(source_country %in% top4) %>%\n  count(source_country, wkday, hour) %>%        #<< derive count of attacks\n  ungroup() %>%\n  mutate(source_country = factor(               #<< Convert source country into a factor so that values will be ordered\n    source_country, levels = top4)) %>%\n  na.omit()\n\n\n\n\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-cycle-plot",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-cycle-plot",
    "title": "Hands On Exercise 06",
    "section": "Plotting Cycle Plot",
    "text": "Plotting Cycle Plot\n\nImporting Data\n\nair <- read_excel(\"data/arrivals_by_air.xlsx\")\n\n\n\nData Preparation\n\n#<< create 2 new fields - MONTH / YEAR\nair$month <- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year <- year(ymd(air$`Month-Year`))\n\n\n#<< extract the target country\nVietnam <- air %>% \n  select(`Vietnam`, \n         month, \n         year) %>%\n  filter(year >= 2010)\n\n#<< derive average arrivals by month\nhline.data <- Vietnam %>% \n  group_by(month) %>%\n  summarise(avgvalue = mean(`Vietnam`))\n\n\n\nPlotting the Cycle Plot\n\nggplot() + \n  geom_line(data=Vietnam,                       #<<plot line chart from vietname dataset, grouped by month\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue),          #<<add average reference line from hline.data\n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-slopegraph",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-slopegraph",
    "title": "Hands On Exercise 06",
    "section": "Plotting Slopegraph",
    "text": "Plotting Slopegraph\n\nInstalling and Loading R Packages\n\npacman::p_load(CGPfunctions)\n\n\nImporting Data\n\nrice <- read_csv(\"data/rice.csv\")\n\n\n\nPlotting the Slopegraph\n\nrice %>% \n  mutate(Year = factor(Year)) %>%                                 #<<convert YEAR from numeric into factor\n  filter(Year %in% c(1961, 1980)) %>%                             #<< filter only for START / END dates\n  newggslopegraph(Year, Yield, Country,                         \n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",\n                Caption = \"Prepared by: Dr. Kam Tin Seong\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-horizon-plot",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-horizon-plot",
    "title": "Hands On Exercise 06",
    "section": "Plotting Horizon Plot",
    "text": "Plotting Horizon Plot\n\nInstalling and Loading R Packages\n\npacman::p_load(ggHoriPlot)\n\n\n\nData Import\n\naverp <- read_csv(\"data/AVERP.csv\") %>% \n  mutate(`Date` = dmy(`Date`))           #<< by default, read_csv imports Date field as Character data type. need to parse the date field into appropriate data type\n\n\n\nPlotting the Horizon Graph\n\naverp %>% \n  filter(Date >= \"2018-01-01\") %>%                          #<< filter for intended date range\n  ggplot() +\n  geom_horizon(aes(x = Date, y=Values), \n               origin = \"midpoint\", \n               horizonscale = 6) +                          #<< defining cut points of the horizon plot\n  facet_grid(`Consumer Items`~.) +                          #<< group by consumer items category\n    theme_few() +\n  scale_fill_hcl(palette = 'RdBu') +\n  theme(panel.spacing.y=unit(0, \"lines\"), strip.text.y = element_text(\n    size = 5, angle = 0, hjust = 0),\n    legend.position = 'none',\n    axis.text.y = element_blank(),\n    axis.text.x = element_text(size=7),\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    panel.border = element_blank()\n    ) +\n    scale_x_date(expand=c(0,0), date_breaks = \"3 month\", date_labels = \"%b%y\") + #<< tick marks to display in 3M intervals\n  ggtitle('Average Retail Prices of Selected Consumer Items (Jan 2018 to Dec 2022)')"
  }
]